// chartDataUtils.ts - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
import type { SeriesBinDto } from '@charts/shared/contracts/chart/Dtos/SeriesBinDto';
import type { SeriesTile, BucketsMs } from '@charts/store/chartsSlice';

export interface ChartDataPoint {
    timestamp: number;
    value: number;
    binData: SeriesBinDto;
}

export interface ZoomAnalysis {
    fromMs: number;
    toMs: number;
    spanMs: number;
    spanMinutes: number;
    spanHours: number;
    visibleBins: SeriesBinDto[];
    visibleBinsCount: number;
    totalBinsCount: number;
    density: number; // —Ç–æ—á–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É
    pointsPerPixel: number; // —Ç–æ—á–µ–∫ –Ω–∞ –ø–∏–∫—Å–µ–ª—å
    optimalBucketMs: BucketsMs;
    currentBucketMs: BucketsMs;
    needsMoreData: boolean;
    dataQuality: 'LOW' | 'MEDIUM' | 'HIGH';
}

export interface ZoomAction {
    type: 'ZOOM_IN' | 'ZOOM_OUT' | 'PAN_LEFT' | 'PAN_RIGHT' | 'INITIAL';
    magnitude: number; // –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏–Ω–æ–≤ –∏–∑ —Ç–∞–π–ª–æ–≤
 */
export function extractBinsFromTiles(tiles: SeriesTile[]): SeriesBinDto[] {
    console.log('üîç [extractBinsFromTiles] –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', {
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ç–∞–π–ª–æ–≤: tiles.length,
        —Ç–∞–π–ª—ã: tiles.map(t => ({
            status: t.status,
            bins_count: t.bins?.length || 0,
            coverage: `${new Date(t.coverageInterval.fromMs).toISOString()} - ${new Date(t.coverageInterval.toMs).toISOString()}`
        }))
    });

    const allBins: SeriesBinDto[] = [];
    let skippedTiles = 0;
    let totalBinsInTiles = 0;

    tiles.forEach((tile, index) => {
        if (tile?.status === 'ready' && Array.isArray(tile.bins)) {
            totalBinsInTiles += tile.bins.length;
            allBins.push(...tile.bins);
            console.log(`  ‚úÖ –¢–∞–π–ª ${index}: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${tile.bins.length} –±–∏–Ω–æ–≤`);
        } else {
            skippedTiles++;
            console.log(`  ‚ö†Ô∏è –¢–∞–π–ª ${index}: –ø—Ä–æ–ø—É—â–µ–Ω (status=${tile?.status}, bins=${Array.isArray(tile?.bins)})`);
        }
    });

    console.log('üìä [extractBinsFromTiles] –î–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', {
        –≤—Å–µ–≥–æ_–±–∏–Ω–æ–≤: allBins.length,
        –ø—Ä–æ–ø—É—â–µ–Ω–æ_—Ç–∞–π–ª–æ–≤: skippedTiles,
        –±–∏–Ω–æ–≤_–≤_—Ç–∞–π–ª–∞—Ö: totalBinsInTiles
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueBins = new Map<number, SeriesBinDto>();
    const duplicates: number[] = [];

    allBins.forEach(bin => {
        const time = new Date(bin.t).getTime();
        if (!uniqueBins.has(time)) {
            uniqueBins.set(time, bin);
        } else {
            duplicates.push(time);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–Ω —Å –±–æ–ª—å—à–∏–º count
            const existing = uniqueBins.get(time)!;
            if (bin.count > existing.count) {
                uniqueBins.set(time, bin);
            }
        }
    });

    const result = Array.from(uniqueBins.values()).sort((a, b) => {
        return new Date(a.t).getTime() - new Date(b.t).getTime();
    });

    console.log('‚úÖ [extractBinsFromTiles] –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
        –±—ã–ª–æ_–±–∏–Ω–æ–≤: allBins.length,
        –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: duplicates.length,
        —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: result.length,
        –ø–µ—Ä–≤—ã–π_–±–∏–Ω: result[0] ? new Date(result[0].t).toISOString() : null,
        –ø–æ—Å–ª–µ–¥–Ω–∏–π_–±–∏–Ω: result[result.length - 1] ? new Date(result[result.length - 1].t).toISOString() : null
    });

    return result;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∏–Ω–æ–≤ –≤ —Ç–æ—á–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
 */
export function binsToChartData(bins: SeriesBinDto[]): ChartDataPoint[] {
    return bins
        .filter(bin => bin && bin.avg !== null && bin.avg !== undefined)
        .map(bin => ({
            timestamp: new Date(bin.t).getTime(),
            value: bin.avg,
            binData: bin,
        }));
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∫–Ω–∞
 */
export function detectZoomAction(
    currentWindow: { fromMs: number; toMs: number },
    previousWindow: { fromMs: number; toMs: number } | null
): ZoomAction {
    if (!previousWindow) {
        return { type: 'INITIAL', magnitude: 0 };
    }

    const currentSpan = currentWindow.toMs - currentWindow.fromMs;
    const previousSpan = previousWindow.toMs - previousWindow.fromMs;
    const currentCenter = currentWindow.fromMs + currentSpan / 2;
    const previousCenter = previousWindow.fromMs + previousSpan / 2;

    // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (1% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    const threshold = previousSpan * 0.01;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
    const spanRatio = currentSpan / previousSpan;
    if (Math.abs(currentSpan - previousSpan) > threshold) {
        if (spanRatio < 0.95) {
            return {
                type: 'ZOOM_IN',
                magnitude: Math.round((1 - spanRatio) * 100)
            };
        } else if (spanRatio > 1.05) {
            return {
                type: 'ZOOM_OUT',
                magnitude: Math.round((spanRatio - 1) * 100)
            };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    const centerShift = Math.abs(currentCenter - previousCenter);
    if (centerShift > threshold) {
        return {
            type: currentCenter < previousCenter ? 'PAN_LEFT' : 'PAN_RIGHT',
            magnitude: Math.round((centerShift / previousSpan) * 100)
        };
    }

    return { type: 'INITIAL', magnitude: 0 };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export function analyzeZoomWindow(
    window: { fromMs: number; toMs: number },
    allBins: SeriesBinDto[],
    currentBucketMs: BucketsMs,
    chartWidthPx: number = 1200
): ZoomAnalysis {
    const spanMs = window.toMs - window.fromMs;
    const spanMinutes = spanMs / 1000 / 60;
    const spanHours = spanMinutes / 60;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–¥–∏–º—ã–µ –±–∏–Ω—ã (—Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const visibleBins = allBins.filter(bin => {
        const binTime = new Date(bin.t).getTime();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–Ω –≤ –æ–∫–Ω–µ –ò –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return binTime >= window.fromMs && binTime <= window.toMs &&
            bin.avg !== null && bin.avg !== undefined;
    });

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –±–∏–Ω–æ–≤
    const totalValidBins = allBins.filter(bin =>
        bin.avg !== null && bin.avg !== undefined
    );

    const visibleBinsCount = visibleBins.length;
    const totalBinsCount = totalValidBins.length;

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const density = spanMinutes > 0 ? visibleBinsCount / spanMinutes : 0;
    const pointsPerPixel = chartWidthPx > 0 ? visibleBinsCount / chartWidthPx : 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∫–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
    const optimalBucketMs = calculateOptimalBucket(spanMs);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    let dataQuality: 'LOW' | 'MEDIUM' | 'HIGH' = 'HIGH';
    if (density < 0.2) {
        dataQuality = 'LOW';
    } else if (density < 0.5) {
        dataQuality = 'MEDIUM';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const needsMoreData = determineNeedsMoreData(
        density,
        pointsPerPixel,
        spanMs,
        currentBucketMs,
        optimalBucketMs
    );

    return {
        fromMs: window.fromMs,
        toMs: window.toMs,
        spanMs,
        spanMinutes,
        spanHours,
        visibleBins,
        visibleBinsCount,
        totalBinsCount,
        density,
        pointsPerPixel,
        optimalBucketMs,
        currentBucketMs,
        needsMoreData,
        dataQuality,
    };
}

/**
 * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∫–µ—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
export function calculateOptimalBucket(spanMs: number): BucketsMs {
    const spanMinutes = spanMs / 1000 / 60;
    const spanHours = spanMinutes / 60;
    const spanDays = spanHours / 24;

    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∫–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Å—à—Ç–∞–±–∞
    if (spanMinutes < 5) {
        return 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –æ—á–µ–Ω—å –º–µ–ª–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
    } else if (spanMinutes < 30) {
        return 10 * 1000; // 10 —Å–µ–∫—É–Ω–¥
    } else if (spanMinutes < 60) {
        return 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥
    } else if (spanHours < 3) {
        return 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
    } else if (spanHours < 12) {
        return 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    } else if (spanHours < 24) {
        return 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
    } else if (spanDays < 3) {
        return 60 * 60 * 1000; // 1 —á–∞—Å
    } else if (spanDays < 7) {
        return 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞
    } else if (spanDays < 30) {
        return 24 * 60 * 60 * 1000; // 1 –¥–µ–Ω—å
    } else {
        return 7 * 24 * 60 * 60 * 1000; // 1 –Ω–µ–¥–µ–ª—è
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function determineNeedsMoreData(
    density: number,
    pointsPerPixel: number,
    spanMs: number,
    currentBucketMs: BucketsMs,
    optimalBucketMs: BucketsMs
): boolean {
    // –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const TARGET_DENSITY = 0.5; // —Ç–æ—á–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É
    const MIN_POINTS_PER_PIXEL = 0.5; // –º–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –Ω–∞ –ø–∏–∫—Å–µ–ª—å
    const MAX_POINTS_PER_PIXEL = 5; // –º–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ –Ω–∞ –ø–∏–∫—Å–µ–ª—å

    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –æ–∫–æ–Ω (–±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏)
    if (spanMs > 7 * 24 * 60 * 60 * 1000) {
        return false;
    }

    // –ù—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –µ—Å–ª–∏:
    // 1. –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è
    if (density < TARGET_DENSITY) {
        return true;
    }

    // 2. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–æ—á–µ–∫ –Ω–∞ –ø–∏–∫—Å–µ–ª—å (–≥—Ä–∞—Ñ–∏–∫ –≤—ã–≥–ª—è–¥–∏—Ç –ø—É—Å—Ç—ã–º)
    if (pointsPerPixel < MIN_POINTS_PER_PIXEL) {
        return true;
    }

    // 3. –¢–µ–∫—É—â–∏–π –±–∞–∫–µ—Ç —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ
    const bucketRatio = currentBucketMs / optimalBucketMs;
    if (bucketRatio > 5 || bucketRatio < 0.2) {
        return true;
    }

    return false;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function formatTimeRange(fromMs: number, toMs: number): string {
    const from = new Date(fromMs);
    const to = new Date(toMs);
    const spanMs = toMs - fromMs;
    const spanMinutes = Math.round(spanMs / 1000 / 60);

    const formatDate = (d: Date) => {
        return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')} ${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;
    };

    return `${formatDate(from)} - ${formatDate(to)} (${spanMinutes} –º–∏–Ω)`;
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
export function prepareDataRequest(analysis: ZoomAnalysis, action: ZoomAction) {
    // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–∏
    let requestFromMs = analysis.fromMs;
    let requestToMs = analysis.toMs;
    const expandFactor = 0.2; // 20% —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã

    if (action.type === 'PAN_LEFT') {
        requestFromMs -= analysis.spanMs * expandFactor;
    } else if (action.type === 'PAN_RIGHT') {
        requestToMs += analysis.spanMs * expandFactor;
    }

    // –û–∫—Ä—É–≥–ª—è–µ–º –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –±–∞–∫–µ—Ç–∞
    const bucket = analysis.optimalBucketMs;
    requestFromMs = Math.floor(requestFromMs / bucket) * bucket;
    requestToMs = Math.ceil(requestToMs / bucket) * bucket;

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π px –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const targetPointsCount = Math.ceil((requestToMs - requestFromMs) / bucket);
    const optimalPx = Math.max(200, Math.min(2000, targetPointsCount * 2));

    return {
        from: new Date(requestFromMs),
        to: new Date(requestToMs),
        px: optimalPx,
        bucketMs: bucket,
        expectedPoints: targetPointsCount,
    };
}