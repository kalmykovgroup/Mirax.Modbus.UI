// SimpleChart.tsx - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞
import React, { useCallback, useRef, useMemo, useEffect } from 'react';
import { useSelector } from 'react-redux';
import type { RootState } from '@/store/store';
import EChartsChartView from './EChartsChartView';
import { ChartHeader } from '@charts/ui/CharContainer/ChartHeader/ChartHeader';
import {
    extractBinsFromTiles,
    binsToChartData,
    detectZoomAction,
    analyzeZoomWindow,
    formatTimeRange,
    prepareDataRequest,
    type ZoomAnalysis,
    type ZoomAction,
} from './chartDataUtils';
import styles from './SimpleChart.module.css';

export interface ZoomEventData {
    fieldName: string;
    action: 'ZOOM_IN' | 'ZOOM_OUT' | 'PAN_LEFT' | 'PAN_RIGHT' | 'INITIAL';
    fromMs: number;
    toMs: number;
    spanMs: number;
    visibleBinsCount: number;
    totalBinsCount: number;
    density: number;
    bucketMs: number;
    needsMoreData: boolean;
    analysis: ZoomAnalysis; // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    requestData?: {
        from: Date;
        to: Date;
        px: number;
        bucketMs: number;
        expectedPoints: number;
    };
}

interface Props {
    fieldName: string;
    height?: number;
    showHeader?: boolean;
    onZoomChange?: (data: ZoomEventData) => void;
}

const SimpleChart: React.FC<Props> = ({
                                          fieldName,
                                          height = 350,
                                          showHeader = true,
                                          onZoomChange
                                      }) => {
    const previousWindowRef = useRef<{ fromMs: number; toMs: number } | null>(null);
    const lastEventTimeRef = useRef<number>(0);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux
    const fieldView = useSelector((state: RootState) => state.charts.view[fieldName]);
    const currentBucketMs = fieldView?.currentBucketsMs || 60000;
    const loading = fieldView?.loading || false;
    const error = fieldView?.error;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const { bins, chartData } = useMemo(() => {
        if (!fieldView || !currentBucketMs) {
            return { bins: [], chartData: [] };
        }

        const assembly = fieldView.seriesLevel[currentBucketMs]?.[0];
        if (!assembly?.tiles) {
            return { bins: [], chartData: [] };
        }

        const extractedBins = extractBinsFromTiles(assembly.tiles);
        const data = binsToChartData(extractedBins);

        console.log(`üìä [SimpleChart:${fieldName}] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, {
            –ø–æ–ª–µ: fieldName,
            –±–∞–∫–µ—Ç: currentBucketMs,
            –≤—Å–µ–≥–æ_–±–∏–Ω–æ–≤: extractedBins.length,
            –≤–∞–ª–∏–¥–Ω—ã—Ö_—Ç–æ—á–µ–∫: data.length,
            —Ç–∞–π–ª–æ–≤: assembly.tiles.length,
            —Å—Ç–∞—Ç—É—Å—ã_—Ç–∞–π–ª–æ–≤: assembly.tiles.map(t => ({
                status: t.status,
                bins: t.bins.length,
                range: formatTimeRange(t.coverageInterval.fromMs, t.coverageInterval.toMs),
            })),
        });

        return {
            bins: extractedBins,
            chartData: data
        };
    }, [fieldView, currentBucketMs, fieldName]);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const [currentWindow, setCurrentWindow] = React.useState<{ fromMs: number; toMs: number } | null>(null);

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const currentAnalysis = useMemo(() => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
        const window = currentWindow || (chartData.length > 0 ? {
            fromMs: Math.min(...chartData.map(d => d.timestamp)),
            toMs: Math.max(...chartData.map(d => d.timestamp))
        } : null);

        if (window && bins.length > 0) {
            return analyzeZoomWindow(
                window,
                bins,
                currentBucketMs,
                1200 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            );
        }
        return null;
    }, [currentWindow, bins, chartData, currentBucketMs]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const handleWindowChange = useCallback((fromMs: number, toMs: number) => {
        const now = Date.now();

        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (now - lastEventTimeRef.current < 100) {
            return;
        }
        lastEventTimeRef.current = now;

        const newWindow = { fromMs, toMs };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        setCurrentWindow(newWindow);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        const action = detectZoomAction(newWindow, previousWindowRef.current);

        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è
        if (action.type === 'INITIAL' && previousWindowRef.current && action.magnitude < 1) {
            previousWindowRef.current = newWindow;
            return;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        const analysis = analyzeZoomWindow(
            currentWindow,
            bins,
            currentBucketMs,
            1200
        );

        console.log(`üîç [SimpleChart:${fieldName}] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞:`, {
            –ø–æ–ª–µ: fieldName,
            –¥–µ–π—Å—Ç–≤–∏–µ: action.type,
            —Å–∏–ª–∞: `${action.magnitude}%`,
            –æ–∫–Ω–æ: formatTimeRange(fromMs, toMs),
            –∞–Ω–∞–ª–∏–∑: {
                –≤–∏–¥–∏–º—ã—Ö_—Ç–æ—á–µ–∫: analysis.visibleBinsCount,
                –≤—Å–µ–≥–æ_—Ç–æ—á–µ–∫: analysis.totalBinsCount,
                –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: `${analysis.density.toFixed(2)} —Ç–æ—á–µ–∫/–º–∏–Ω`,
                —Ç–æ—á–µ–∫_–Ω–∞_–ø–∏–∫—Å–µ–ª—å: analysis.pointsPerPixel.toFixed(2),
                –∫–∞—á–µ—Å—Ç–≤–æ_–¥–∞–Ω–Ω—ã—Ö: analysis.dataQuality,
                —Ç–µ–∫—É—â–∏–π_–±–∞–∫–µ—Ç: `${Math.round(currentBucketMs / 1000)}—Å`,
                –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π_–±–∞–∫–µ—Ç: `${Math.round(analysis.optimalBucketMs / 1000)}—Å`,
                –Ω—É–∂–Ω–∞_–∑–∞–≥—Ä—É–∑–∫–∞: analysis.needsMoreData,
            },
        });

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let requestData = undefined;
        if (analysis.needsMoreData) {
            requestData = prepareDataRequest(analysis, action);

            console.log(`üì§ [SimpleChart:${fieldName}] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å:`, {
                –ø–æ–ª–µ: fieldName,
                –¥–∏–∞–ø–∞–∑–æ–Ω: formatTimeRange(
                    requestData.from.getTime(),
                    requestData.to.getTime()
                ),
                px: requestData.px,
                –±–∞–∫–µ—Ç: `${Math.round(requestData.bucketMs / 1000)}—Å`,
                –æ–∂–∏–¥–∞–µ–º—ã—Ö_—Ç–æ—á–µ–∫: requestData.expectedPoints,
            });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞–≤–µ—Ä—Ö
        const eventData: ZoomEventData = {
            fieldName,
            action: action.type,
            fromMs,
            toMs,
            spanMs: toMs - fromMs,
            visibleBinsCount: analysis.visibleBinsCount,
            totalBinsCount: analysis.totalBinsCount,
            density: analysis.density,
            bucketMs: currentBucketMs,
            needsMoreData: analysis.needsMoreData,
            analysis,
            requestData,
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        previousWindowRef.current = currentWindow;

        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
        if (onZoomChange) {
            onZoomChange(eventData);
        }
    }, [fieldName, bins, currentBucketMs, onZoomChange]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    useEffect(() => {
        if (chartData.length > 0 && !previousWindowRef.current) {
            const minTime = Math.min(...chartData.map(d => d.timestamp));
            const maxTime = Math.max(...chartData.map(d => d.timestamp));

            previousWindowRef.current = {
                fromMs: minTime,
                toMs: maxTime,
            };

            console.log(`üé¨ [SimpleChart:${fieldName}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞:`, {
                –ø–æ–ª–µ: fieldName,
                –æ–∫–Ω–æ: formatTimeRange(minTime, maxTime),
                —Ç–æ—á–µ–∫: chartData.length,
            });
        }
    }, [chartData, fieldName]);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (error) {
        return (
            <div className={styles.errorContainer}>
                <div className={styles.errorMessage}>
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error}
                </div>
            </div>
        );
    }

    return (
        <div className={styles.container}>
            {showHeader && (
                <ChartHeader
                    fieldName={fieldName}
                    title={fieldName}
                />
            )}

            <EChartsChartView
                fieldName={fieldName}
                data={chartData}
                height={height}
                bucketMs={currentBucketMs}
                visiblePointsCount={currentAnalysis?.visibleBinsCount || chartData.length}
                totalPointsCount={chartData.length}
                density={currentAnalysis?.density || 0}
                dataQuality={currentAnalysis?.dataQuality || 'HIGH'}
                loading={loading}
                onWindowChange={handleWindowChange}
            />

            {/* –ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) */}
            {process.env.NODE_ENV === 'development' && currentAnalysis && (
                <div className={styles.debugPanel}>
                    <h4>Debug Info</h4>
                    <pre>{JSON.stringify({
                        window: formatTimeRange(currentAnalysis.fromMs, currentAnalysis.toMs),
                        spanMinutes: Math.round(currentAnalysis.spanMinutes),
                        visiblePoints: currentAnalysis.visibleBinsCount,
                        density: currentAnalysis.density.toFixed(2),
                        quality: currentAnalysis.dataQuality,
                        needsData: currentAnalysis.needsMoreData,
                    }, null, 2)}</pre>
                </div>
            )}
        </div>
    );
};

export default SimpleChart;