// thunks.test.ts - —Ç–µ—Å—Ç–æ–≤—ã–π thunk –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Header
import { createAsyncThunk } from '@reduxjs/toolkit';
import type { RootState } from '@/store/store';
import type { SeriesBinDto } from '@charts/shared/contracts/chart/Dtos/SeriesBinDto';
import type { CoverageInterval, BucketsMs } from './chartsSlice';

import {
    updateView,
    upsertTiles,
    setFieldError,
    startLoading,
    finishLoading,
} from './chartsSlice';

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function generateFakeBins(
    fromMs: number,
    toMs: number,
    bucketMs: number,
    fillRate = 0.8, // –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    maxBins = 1000  // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
): SeriesBinDto[] {
    const bins: SeriesBinDto[] = [];
    const totalBins = Math.ceil((toMs - fromMs) / bucketMs);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const actualBins = Math.min(totalBins, maxBins);
    const step = totalBins > maxBins ? Math.floor(totalBins / maxBins) : 1;

    for (let i = 0; i < actualBins; i++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "–¥—ã—Ä" –≤ –¥–∞–Ω–Ω—ã—Ö
        if (Math.random() > fillRate) continue;

        const actualIndex = i * step;
        const t = new Date(fromMs + actualIndex * bucketMs);
        const value = 20 + Math.sin(actualIndex / 10) * 10 + Math.random() * 5;

        bins.push({
            t,
            min: value - Math.random() * 2,
            max: value + Math.random() * 2,
            avg: value,
            count: Math.floor(Math.random() * 100) + 1,
        });
    }

    console.log(`  üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${bins.length} –±–∏–Ω–æ–≤ (–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö ${totalBins})`);
    return bins;
}

// –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π –∏–∑ view
function getExistingLevels(view: any): BucketsMs[] {
    if (!view || !view.seriesLevel) return [];

    return Object.keys(view.seriesLevel)
        .map(k => Number(k) as BucketsMs)
        .filter(b => Number.isFinite(b) && b > 0)
        .sort((a, b) => b - a); // –û—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
}

// ===== –¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò =====

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ
 */
export const testInitializeMultipleLevels = createAsyncThunk<
    void,
    { fieldName: string },
    { state: RootState }
>('charts/test/initializeMultipleLevels', async ({ fieldName }, { dispatch, getState }) => {
    console.log('üß™ TEST: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è', fieldName);

    const state = getState();
    const template = state.charts.template;
    if (!template?.from || !template?.to) {
        throw new Error('Template with time range required');
    }

    const from = template.from.getTime();
    const to = template.to.getTime();
    const timeRange = { from: template.from, to: template.to };

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π view
    const existingView = state.charts.view[fieldName];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    let testLevels: BucketsMs[] = [];

    if (existingView && existingView.seriesLevel) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏
        testLevels = getExistingLevels(existingView);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${testLevels.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π:`,
            testLevels.map(ms => formatBucket(ms)).join(', '));

        if (testLevels.length === 0) {
            // –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            console.log('‚ö†Ô∏è –£—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ...');
            testLevels = [
                60 * 60 * 1000,   // 1 —á–∞—Å
                5 * 60 * 1000,    // 5 –º–∏–Ω—É—Ç
                60 * 1000,        // 1 –º–∏–Ω—É—Ç–∞
            ];
        }
    } else {
        // View –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
        console.log('üîç View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏...');
        testLevels = [
            60 * 60 * 1000,   // 1 —á–∞—Å
            5 * 60 * 1000,    // 5 –º–∏–Ω—É—Ç
            60 * 1000,        // 1 –º–∏–Ω—É—Ç–∞
        ];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º view
        dispatch(updateView({
            field: fieldName,
            px: 1200,
            currentRange: timeRange,
            currentBucketsMs: existingView?.currentBucketsMs || testLevels[0],
        }));

        dispatch(initialLevels({
            field: fieldName,
            bucketList: testLevels,
        }));
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π bucket –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞
    const currentBucket = existingView?.currentBucketsMs || testLevels[0];
    console.log(`üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${formatBucket(currentBucket)}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    for (let i = 0; i < testLevels.length; i++) {
        const bucketMs = testLevels[i];
        console.log(`\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è ${formatBucket(bucketMs)} (${bucketMs}ms)`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
        const existingTiles = existingView?.seriesLevel[bucketMs] || [];
        if (existingTiles.length > 0) {
            console.log(`  ‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ${existingTiles.length} —Ç–∞–π–ª–æ–≤`);
        }

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–∞–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const totalSpan = to - from;
        const numChunks = 6; // –ë–æ–ª—å—à–µ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        const chunkSize = totalSpan / numChunks;

        // –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫–∏–µ —á–∞–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å (70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        const chunksToLoad = [];
        for (let j = 0; j < numChunks; j++) {
            if (Math.random() > 0.3) { // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
                chunksToLoad.push(j);
            }
        }

        console.log(`  üîÑ –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏: ${chunksToLoad.length}/${numChunks} —á–∞–Ω–∫–æ–≤`);

        for (const j of chunksToLoad) {
            const chunkStart = from + j * chunkSize;
            const chunkEnd = chunkStart + chunkSize;

            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –±–∞–∫–µ—Ç–∞
            const alignedStart = Math.floor(chunkStart / bucketMs) * bucketMs;
            const alignedEnd = Math.ceil(chunkEnd / bucketMs) * bucketMs;

            const interval: CoverageInterval = {
                fromMs: alignedStart,
                toMs: alignedEnd,
            };

            // –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            const loadResult = Math.random();

            if (loadResult < 0.1) {
                // 10% - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ loading
                dispatch(upsertTiles({
                    field: fieldName,
                    bucketMs: bucketMs,
                    tiles: [{
                        coverageInterval: interval,
                        bins: [],
                        status: 'loading' as const,
                    }],
                }));
                console.log(`  ‚è≥ –ß–∞–Ω–∫ ${j + 1}: –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...`);

            } else if (loadResult < 0.2) {
                // 10% - –æ—à–∏–±–∫–∞
                dispatch(upsertTiles({
                    field: fieldName,
                    bucketMs: bucketMs,
                    tiles: [{
                        coverageInterval: interval,
                        bins: [],
                        status: 'error' as const,
                        error: `Test error for chunk ${j + 1}`,
                    }],
                }));
                console.log(`  ‚ùå –ß–∞–Ω–∫ ${j + 1}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`);

            } else {
                // 80% - —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                dispatch(startLoading({
                    field: fieldName,
                    type: 'initial',
                    message: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'
                }));

                // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                await delay(100 + Math.random() * 200);

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
                const fillRate = 0.5 + Math.random() * 0.45; // –æ—Ç 50% –¥–æ 95%
                const bins = generateFakeBins(
                    alignedStart,
                    alignedEnd,
                    bucketMs,
                    fillRate
                );

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                dispatch(upsertTiles({
                    field: fieldName,
                    bucketMs: bucketMs,
                    tiles: [{
                        coverageInterval: interval,
                        bins,
                        status: 'ready' as const,
                    }],
                }));

                console.log(`  ‚úÖ –ß–∞–Ω–∫ ${j + 1}: ${bins.length} –±–∏–Ω–æ–≤ (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å ${(fillRate * 100).toFixed(0)}%)`);

                dispatch(finishLoading({
                    field: fieldName,
                    success: true
                }));
            }
        }

        // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        dispatch(finishLoading({
            field: fieldName,
            success: true
        }));
    }

    console.log('\n‚ú® TEST: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
 */
export const testIncrementalLoad = createAsyncThunk<
    void,
    {
        fieldName: string;
        targetCoverage: number; // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (0-100)
    },
    { state: RootState }
>('charts/test/incrementalLoad', async ({ fieldName, targetCoverage }, { dispatch, getState }) => {
    console.log('üß™ TEST: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ', targetCoverage + '%');

    const state = getState();
    const view = state.charts.view[fieldName];
    if (!view) {
        console.error('‚ùå View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é!');
        throw new Error('View not initialized for field: ' + fieldName);
    }

    const currentBucket = view.currentBucketsMs;
    console.log(`üéØ –†–∞–±–æ—Ç–∞–µ–º —Å —É—Ä–æ–≤–Ω–µ–º: ${formatBucket(currentBucket)}`);

    const tiles = view.seriesLevel[currentBucket];
    if (!tiles) {
        console.warn(`‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å ${formatBucket(currentBucket)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        throw new Error('No tiles for current bucket');
    }

    const template = state.charts.template;
    if (!template?.from || !template?.to) {
        throw new Error('Template required');
    }

    const domainStart = template.from.getTime();
    const domainEnd = template.to.getTime();
    const domainSpan = domainEnd - domainStart;

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –¥—ã—Ä—ã –≤ –ø–æ–∫—Ä—ã—Ç–∏–∏
    const gaps = findGapsInCoverage(
        tiles.filter(t => t.status === 'ready').map(t => t.coverageInterval),
        domainStart,
        domainEnd
    );

    console.log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
    console.log(`  - –¢–∞–π–ª–æ–≤: ${tiles.length}`);
    console.log(`  - –ì–æ—Ç–æ–≤—ã—Ö: ${tiles.filter(t => t.status === 'ready').length}`);
    console.log(`  - –° –æ—à–∏–±–∫–∞–º–∏: ${tiles.filter(t => t.status === 'error').length}`);
    console.log(`  - –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è: ${tiles.filter(t => t.status === 'loading').length}`);
    console.log(`  - –ù–∞–π–¥–µ–Ω–æ –¥—ã—Ä: ${gaps.length}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—ã—Ä—ã –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    let currentCoverageMs = calculateCoverage(tiles, domainStart, domainEnd);
    let currentPercent = (currentCoverageMs / domainSpan) * 100;

    console.log(`üìà –¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${currentPercent.toFixed(1)}%`);

    for (const gap of gaps) {
        if (currentPercent >= targetCoverage) {
            console.log(`‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ø–æ–∫—Ä—ã—Ç–∏–µ ${currentPercent.toFixed(1)}%`);
            break;
        }

        console.log(`üî• –ó–∞–≥—Ä—É–∑–∫–∞ –¥—ã—Ä—ã: ${formatMs(gap.fromMs)} - ${formatMs(gap.toMs)}`);

        // –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        const loadResult = Math.random();

        if (loadResult < 0.15) {
            // 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!`);
            dispatch(upsertTiles({
                field: fieldName,
                bucketMs: currentBucket,
                tiles: [{
                    coverageInterval: gap,
                    bins: [],
                    status: 'error' as const,
                    error: 'Network timeout (test error)',
                }],
            }));
            continue;
        }

        if (loadResult < 0.25) {
            // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ loading
            console.log(`  ‚è≥ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏`);
            dispatch(upsertTiles({
                field: fieldName,
                bucketMs: currentBucket,
                tiles: [{
                    coverageInterval: gap,
                    bins: [],
                    status: 'loading' as const,
                }],
            }));
            continue;
        }

        // 75% - —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        dispatch(startLoading({
            field: fieldName,
            type: 'zoom',
            message: '–î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'
        }));

        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await delay(200 + Math.random() * 300);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é
        const fillRate = 0.6 + Math.random() * 0.35; // –æ—Ç 60% –¥–æ 95%
        const bins = generateFakeBins(gap.fromMs, gap.toMs, currentBucket, fillRate);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        dispatch(upsertTiles({
            field: fieldName,
            bucketMs: currentBucket,
            tiles: [{
                coverageInterval: gap,
                bins,
                status: 'ready' as const,
            }],
        }));

        // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        dispatch(finishLoading({
            field: fieldName,
            success: true
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        currentCoverageMs += (gap.toMs - gap.fromMs);
        currentPercent = (currentCoverageMs / domainSpan) * 100;

        console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${bins.length} –±–∏–Ω–æ–≤ (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å ${(fillRate * 100).toFixed(0)}%), –ø–æ–∫—Ä—ã—Ç–∏–µ: ${currentPercent.toFixed(1)}%`);
    }

    console.log('\n‚ú® TEST: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
 */
export const testSwitchLevel = createAsyncThunk<
    void,
    {
        fieldName: string;
        targetBucketMs?: BucketsMs; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    },
    { state: RootState }
>('charts/test/switchLevel', async ({ fieldName, targetBucketMs }, { dispatch, getState }) => {
    const state = getState();
    const view = state.charts.view[fieldName];
    if (!view) {
        console.error('‚ùå View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é!');
        throw new Error('View not initialized');
    }

    const existingLevels = getExistingLevels(view);
    if (existingLevels.length === 0) {
        console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π');
        throw new Error('No levels available');
    }

    const oldBucket = view.currentBucketsMs;

    // –ï—Å–ª–∏ targetBucketMs –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (!targetBucketMs) {
        const currentIndex = existingLevels.indexOf(oldBucket);
        const nextIndex = (currentIndex + 1) % existingLevels.length;
        targetBucketMs = existingLevels[nextIndex];
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${formatBucket(targetBucketMs)}`);
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (!existingLevels.includes(targetBucketMs)) {
            console.warn(`‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å ${formatBucket(targetBucketMs)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: ${existingLevels.map(ms => formatBucket(ms)).join(', ')}`);
            targetBucketMs = existingLevels[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            console.log(`üìå –ò—Å–ø–æ–ª—å–∑—É—é ${formatBucket(targetBucketMs)} –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ`);
        }
    }

    console.log(`üß™ TEST: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ${formatBucket(oldBucket)} ‚Üí ${formatBucket(targetBucketMs)}`);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    dispatch(setCurrentBucketMs({
        field: fieldName,
        bucketMs: targetBucketMs,
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
    const targetTiles = view.seriesLevel[targetBucketMs];
    if (!targetTiles || targetTiles.length === 0) {
        console.log('üî• –£—Ä–æ–≤–µ–Ω—å –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');

        const template = state.charts.template;
        if (!template?.from || !template?.to) return;

        const from = template.from.getTime();
        const to = template.to.getTime();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const center = (from + to) / 2;
        const span = (to - from) / 3; // –¢—Ä–µ—Ç—å –æ–±—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const loadStart = Math.floor((center - span / 2) / targetBucketMs) * targetBucketMs;
        const loadEnd = Math.ceil((center + span / 2) / targetBucketMs) * targetBucketMs;

        const interval: CoverageInterval = {
            fromMs: loadStart,
            toMs: loadEnd,
        };

        dispatch(startLoading({
            field: fieldName,
            type: 'zoom',
            message: '–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è...'
        }));

        await delay(800);

        const bins = generateFakeBins(loadStart, loadEnd, targetBucketMs, 0.85);

        dispatch(upsertTiles({
            field: fieldName,
            bucketMs: targetBucketMs,
            tiles: [{
                coverageInterval: interval,
                bins,
                status: 'ready' as const,
            }],
        }));

        dispatch(finishLoading({
            field: fieldName,
            success: true
        }));

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${bins.length} –±–∏–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è`);
    } else {
        const readyTiles = targetTiles.filter(t => t.status === 'ready').length;
        const errorTiles = targetTiles.filter(t => t.status === 'error').length;
        const loadingTiles = targetTiles.filter(t => t.status === 'loading').length;

        console.log(`‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ:`);
        console.log(`  - –í—Å–µ–≥–æ —Ç–∞–π–ª–æ–≤: ${targetTiles.length}`);
        console.log(`  - –ì–æ—Ç–æ–≤—ã—Ö: ${readyTiles}`);
        console.log(`  - –° –æ—à–∏–±–∫–∞–º–∏: ${errorTiles}`);
        console.log(`  - –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è: ${loadingTiles}`);
    }

    console.log('‚ú® TEST: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
});

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è (pan)
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
 */
export const testPanNavigation = createAsyncThunk<
    void,
    {
        fieldName: string;
        direction?: 'left' | 'right' | 'both';
        panSteps?: number;
    },
    { state: RootState }
>('charts/test/panNavigation', async ({ fieldName, direction = 'both', panSteps = 3 }, { dispatch, getState }) => {
    console.log('üß™ TEST: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è');

    const state = getState();
    const view = state.charts.view[fieldName];
    if (!view) {
        console.error('‚ùå View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        throw new Error('View not initialized');
    }

    const template = state.charts.template;
    if (!template?.from || !template?.to) {
        throw new Error('Template required');
    }

    const bucketMs = view.currentBucketsMs;
    console.log(`üéØ –†–∞–±–æ—Ç–∞–µ–º —Å —É—Ä–æ–≤–Ω–µ–º: ${formatBucket(bucketMs)}`);

    const domainStart = template.from.getTime();
    const domainEnd = template.to.getTime();
    const domainSpan = domainEnd - domainStart;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è (20% –æ—Ç –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
    const panStepSize = domainSpan * 0.2;

    console.log(`üîÑ –®–∞–≥ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${(panStepSize / (1000 * 60 * 60)).toFixed(2)} —á–∞—Å–æ–≤`);

    // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–µ–≤–æ
    if (direction === 'left' || direction === 'both') {
        console.log('\n‚óÄÔ∏è –ü–ê–ù–û–†–ê–ú–ò–†–û–í–ê–ù–ò–ï –í–õ–ï–í–û');

        for (let step = 1; step <= panSteps; step++) {
            console.log(`\n  –®–∞–≥ ${step}/${panSteps} –≤–ª–µ–≤–æ`);

            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–ª–µ–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π)
            const newEnd = domainStart - (panStepSize * (step - 1));
            const newStart = domainStart - (panStepSize * step);

            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º bucket
            const alignedStart = Math.floor(newStart / bucketMs) * bucketMs;
            const alignedEnd = Math.ceil(newEnd / bucketMs) * bucketMs;

            const interval: CoverageInterval = {
                fromMs: alignedStart,
                toMs: alignedEnd,
            };

            console.log(`  üìç –ó–∞–≥—Ä—É–∂–∞–µ–º: ${formatMs(alignedStart)} - ${formatMs(alignedEnd)}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            dispatch(startLoading({
                field: fieldName,
                type: 'background',
                message: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏...'
            }));

            await delay(300 + Math.random() * 200);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
            const fillRate = 0.7 + Math.random() * 0.25;
            const bins = generateFakeBins(alignedStart, alignedEnd, bucketMs, fillRate);

            dispatch(upsertTiles({
                field: fieldName,
                bucketMs: bucketMs,
                tiles: [{
                    coverageInterval: interval,
                    bins,
                    status: 'ready' as const,
                }],
            }));

            dispatch(finishLoading({
                field: fieldName,
                success: true
            }));

            console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${bins.length} –±–∏–Ω–æ–≤`);
        }
    }

    // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
    if (direction === 'right' || direction === 'both') {
        console.log('\n‚ñ∂Ô∏è –ü–ê–ù–û–†–ê–ú–ò–†–û–í–ê–ù–ò–ï –í–ü–†–ê–í–û');

        for (let step = 1; step <= panSteps; step++) {
            console.log(`\n  –®–∞–≥ ${step}/${panSteps} –≤–ø—Ä–∞–≤–æ`);

            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π)
            const newStart = domainEnd + (panStepSize * (step - 1));
            const newEnd = domainEnd + (panStepSize * step);

            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º bucket
            const alignedStart = Math.floor(newStart / bucketMs) * bucketMs;
            const alignedEnd = Math.ceil(newEnd / bucketMs) * bucketMs;

            const interval: CoverageInterval = {
                fromMs: alignedStart,
                toMs: alignedEnd,
            };

            console.log(`  üìç –ó–∞–≥—Ä—É–∂–∞–µ–º: ${formatMs(alignedStart)} - ${formatMs(alignedEnd)}`);

            // –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            const loadResult = Math.random();

            if (loadResult < 0.1) {
                // 10% - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏`);
                dispatch(upsertTiles({
                    field: fieldName,
                    bucketMs: bucketMs,
                    tiles: [{
                        coverageInterval: interval,
                        bins: [],
                        status: 'error' as const,
                        error: 'Failed to load future data',
                    }],
                }));
            } else {
                // 90% - —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                dispatch(startLoading({
                    field: fieldName,
                    type: 'background',
                    message: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–∞—Å—Ç–∏...'
                }));

                await delay(300 + Math.random() * 200);

                const fillRate = 0.7 + Math.random() * 0.25;
                const bins = generateFakeBins(alignedStart, alignedEnd, bucketMs, fillRate);

                dispatch(upsertTiles({
                    field: fieldName,
                    bucketMs: bucketMs,
                    tiles: [{
                        coverageInterval: interval,
                        bins,
                        status: 'ready' as const,
                    }],
                }));

                dispatch(finishLoading({
                    field: fieldName,
                    success: true
                }));

                console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${bins.length} –±–∏–Ω–æ–≤`);
            }
        }
    }

    console.log('\n‚ú® TEST: –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
});

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
 */
export const testLoadingErrors = createAsyncThunk<
    void,
    { fieldName: string },
    { state: RootState }
>('charts/test/loadingErrors', async ({ fieldName }, { dispatch, getState }) => {
    console.log('üß™ TEST: –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏');

    const state = getState();
    const view = state.charts.view[fieldName];
    if (!view) {
        console.error('‚ùå View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é!');
        throw new Error('View not initialized');
    }

    const template = state.charts.template;
    if (!template?.from || !template?.to) return;

    const bucketMs = view.currentBucketsMs;
    console.log(`üéØ –†–∞–±–æ—Ç–∞–µ–º —Å —É—Ä–æ–≤–Ω–µ–º: ${formatBucket(bucketMs)}`);

    const from = template.from.getTime();
    const to = template.to.getTime();
    const chunkSize = (to - from) / 5;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º 5 —á–∞–Ω–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const scenarios = [
        { status: 'success', delay: 300 },
        { status: 'error', delay: 500, error: 'Connection refused' },
        { status: 'success', delay: 200 },
        { status: 'error', delay: 400, error: 'Timeout exceeded' },
        { status: 'loading', delay: 0 }, // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ loading
    ];

    for (let i = 0; i < scenarios.length; i++) {
        const scenario = scenarios[i];
        const chunkStart = Math.floor((from + i * chunkSize) / bucketMs) * bucketMs;
        const chunkEnd = Math.ceil((chunkStart + chunkSize) / bucketMs) * bucketMs;

        const interval: CoverageInterval = {
            fromMs: chunkStart,
            toMs: chunkEnd,
        };

        console.log(`üî• –ß–∞–Ω–∫ ${i + 1}: ${scenario.status}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        dispatch(startLoading({
            field: fieldName,
            type: 'background',
            message: `–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞ ${i + 1}/5...`
        }));

        if (scenario.delay > 0) {
            await delay(scenario.delay);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (scenario.status === 'success') {
            const bins = generateFakeBins(chunkStart, chunkEnd, bucketMs, 0.9);
            dispatch(upsertTiles({
                field: fieldName,
                bucketMs,
                tiles: [{
                    coverageInterval: interval,
                    bins,
                    status: 'ready' as const,
                }],
            }));
            console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);

        } else if (scenario.status === 'error') {
            dispatch(upsertTiles({
                field: fieldName,
                bucketMs,
                tiles: [{
                    coverageInterval: interval,
                    bins: [],
                    status: 'error' as const,
                    error: scenario.error,
                }],
            }));
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${scenario.error}`);

        } else if (scenario.status === 'loading') {
            dispatch(upsertTiles({
                field: fieldName,
                bucketMs,
                tiles: [{
                    coverageInterval: interval,
                    bins: [],
                    status: 'loading' as const,
                }],
            }));
            console.log(`  ‚è≥ –û—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏`);
        }

        // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª—É—á–∞—è
        if (scenario.status !== 'loading') {
            dispatch(finishLoading({
                field: fieldName,
                success: scenario.status === 'success',
                error: scenario.status === 'error' ? scenario.error : undefined
            }));
        }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –ø–æ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    dispatch(setFieldError({
        fieldName: fieldName,
        error: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
    }));

    console.log('‚ú® TEST: –°—Ü–µ–Ω–∞—Ä–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
});

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

function findGapsInCoverage(
    coverage: CoverageInterval[],
    domainStart: number,
    domainEnd: number
): CoverageInterval[] {
    if (coverage.length === 0) {
        return [{ fromMs: domainStart, toMs: domainEnd }];
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    const sorted = [...coverage].sort((a, b) => a.fromMs - b.fromMs);
    const gaps: CoverageInterval[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ
    if (sorted[0].fromMs > domainStart) {
        gaps.push({ fromMs: domainStart, toMs: sorted[0].fromMs });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
    for (let i = 0; i < sorted.length - 1; i++) {
        const current = sorted[i];
        const next = sorted[i + 1];
        if (current.toMs < next.fromMs) {
            gaps.push({ fromMs: current.toMs, toMs: next.fromMs });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü
    const last = sorted[sorted.length - 1];
    if (last.toMs < domainEnd) {
        gaps.push({ fromMs: last.toMs, toMs: domainEnd });
    }

    return gaps;
}

function calculateCoverage(
    tiles: Array<{ coverageInterval: CoverageInterval; status: string }>,
    domainStart: number,
    domainEnd: number
): number {
    let covered = 0;

    tiles
        .filter(t => t.status === 'ready')
        .forEach(tile => {
            const start = Math.max(tile.coverageInterval.fromMs, domainStart);
            const end = Math.min(tile.coverageInterval.toMs, domainEnd);
            if (end > start) {
                covered += (end - start);
            }
        });

    return covered;
}

function formatBucket(ms: number): string {
    const s = ms / 1000;
    if (s < 60) return `${s}—Å`;
    const m = s / 60;
    if (m < 60) return `${m}–º–∏–Ω`;
    const h = m / 60;
    if (h < 24) return `${h}—á`;
    const d = h / 24;
    return `${d}–¥`;
}

function formatMs(ms: number): string {
    return new Date(ms).toLocaleTimeString('ru-RU');
}

// ===== –ö–û–ú–ü–û–ó–ò–¢–ù–´–ô –¢–ï–°–¢ =====

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
 */
export const runFullTestSuite = createAsyncThunk<
    void,
    { fieldName: string },
    { state: RootState }
>('charts/test/fullSuite', async ({ fieldName }, { dispatch, getState }) => {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ë–û–†–ê');
    console.log('=====================================\n');

    // 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = getState();
    const view = state.charts.view[fieldName];

    if (view) {
        const levels = getExistingLevels(view);
        console.log(`üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
        console.log(`  - –£—Ä–æ–≤–Ω–∏: ${levels.map(ms => formatBucket(ms)).join(', ')}`);
        console.log(`  - –¢–µ–∫—É—â–∏–π: ${formatBucket(view.currentBucketsMs)}`);
    } else {
        console.log('üìã View –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    }

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    console.log('\n--- –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---');
    await dispatch(testInitializeMultipleLevels({ fieldName })).unwrap();
    await delay(1000);

    // 2. –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ 80%
    console.log('\n--- –≠—Ç–∞–ø 2: –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ ---');
    await dispatch(testIncrementalLoad({ fieldName, targetCoverage: 80 })).unwrap();
    await delay(1000);

    // 3. –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ
    console.log('\n--- –≠—Ç–∞–ø 3: –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ ---');
    await dispatch(testPanNavigation({
        fieldName,
        direction: 'both',
        panSteps: 2
    })).unwrap();
    await delay(1000);

    // 4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    console.log('\n--- –≠—Ç–∞–ø 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è ---');
    await dispatch(testSwitchLevel({ fieldName })).unwrap(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π
    await delay(1000);

    // 5. –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    console.log('\n--- –≠—Ç–∞–ø 5: –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ ---');
    await dispatch(testLoadingErrors({ fieldName })).unwrap();

    console.log('\n=====================================');
    console.log('‚úÖ –¢–ï–°–¢–û–í–´–ô –ù–ê–ë–û–† –ó–ê–í–ï–†–®–ï–ù');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Header –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
});