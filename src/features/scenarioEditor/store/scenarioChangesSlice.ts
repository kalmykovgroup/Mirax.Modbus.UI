/**
 * –§–ê–ô–õ: src/store/changes/changesSlice.ts
 *
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Redux slice –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª—é–±—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
 */

import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type {
    ChangeAction,
    ChangesContext,
    ChangesState,
    Entity,
    EntityChange
} from '@scenario/core/scenarioChangeCenter/types';
import storage from 'redux-persist/lib/storage';
import { persistReducer } from 'redux-persist';
import type {RootState} from "@/baseStore/store.ts";

const initialState: ChangesState = {
    contexts: {},
};

export const scenarioChangesSlice = createSlice({
    name: 'scenarioChanges',
    initialState,
    reducers: {
        /**
         * –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
         */
        addChange: <T extends Entity>(
            state: ChangesState,
            action: PayloadAction<{
                contextId: string;
                entityType: string;
                entity: T;
                action: ChangeAction;
                original?: T | undefined;
            }>
        ) => {
            const { contextId, entityType, entity, action: changeAction, original } = action.payload;

            console.log('üü¢ addChange reducer –≤—ã–∑–≤–∞–Ω:', {
                contextId,
                entityType,
                entityId: entity.id,
                action: changeAction,
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (noUncheckedIndexedAccess)
            const existingContext = state.contexts[contextId];
            if (existingContext === undefined) {
                console.log('üì¶ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', contextId);
                state.contexts[contextId] = {
                    contextId,
                    changes: {},
                };
            }

            // –¢–µ–ø–µ—Ä—å context —Ç–æ—á–Ω–æ –Ω–µ undefined
            const context = state.contexts[contextId];
            if (context === undefined) return; // type guard –¥–ª—è TS

            const key = `${entityType}:${entity.id}`;
            const existing = context.changes[key]; // –º–æ–∂–µ—Ç –±—ã—Ç—å undefined

            console.log('üîë –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω–∏—è:', key, existing !== undefined ? '–Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ' : '–Ω–æ–≤–æ–µ');

            const newChange: EntityChange<T> = {
                id: crypto.randomUUID(),
                entityType,
                entityId: entity.id,
                action: changeAction,
                timestamp: Date.now(),
                original: changeAction === 'create' ? undefined : (original ?? existing?.original),
                current: changeAction === 'delete' ? undefined : entity,
            };

            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            if (existing !== undefined) {
                const optimized = optimizePair(existing as EntityChange<T>, newChange);

                if (optimized === null) {
                    console.log('üóëÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ null (create+delete)');
                    // –í–∑–∞–∏–º–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏—Å—å (create+delete)
                    const { [key]: _removed, ...rest } = context.changes;
                    context.changes = rest;
                } else {
                    console.log('‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', optimized.action);
                    context.changes = {
                        ...context.changes,
                        [key]: optimized,
                    };
                }
            } else {
                console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ');
                context.changes = {
                    ...context.changes,
                    [key]: newChange,
                };
            }

            console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ context.changes:', Object.keys(context.changes).length, '–∏–∑–º–µ–Ω–µ–Ω–∏–π');
        },

        /**
         * –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
         */
        clearContext: (state: ChangesState, action: PayloadAction<string>) => {
            const contextId = action.payload;
            console.log('üßπ clearContext –≤—ã–∑–≤–∞–Ω:', contextId);
            const { [contextId]: _removed, ...rest } = state.contexts;
            state.contexts = rest;
        },

        /**
         * –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
         */
        removeChange: (
            state: ChangesState,
            action: PayloadAction<{ contextId: string; key: string }>
        ) => {
            const { contextId, key } = action.payload;
            console.log('‚ùå removeChange –≤—ã–∑–≤–∞–Ω:', { contextId, key });
            const context = state.contexts[contextId];

            if (context !== undefined) {
                const { [key]: _removed, ...rest } = context.changes;
                context.changes = rest;
            }
        },

        /**
         * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
         */
        clearAll: (state: ChangesState) => {
            console.log('üí• clearAll –≤—ã–∑–≤–∞–Ω');
            state.contexts = {};
        },
    },
});

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é
 */
function optimizePair<T extends Entity>(
    first: EntityChange<T>,
    second: EntityChange<T>
): EntityChange<T> | null {
    // CREATE + DELETE = null (—Å–æ–∑–¥–∞–ª–∏ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏–ª–∏)
    if (first.action === 'create' && second.action === 'delete') {
        return null;
    }

    // CREATE + UPDATE = CREATE —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (first.action === 'create' && second.action === 'update') {
        return {
            ...second,
            action: 'create',
            original: undefined,
        };
    }

    // UPDATE + UPDATE = UPDATE —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (first.action === 'update' && second.action === 'update') {
        return {
            ...second,
            original: first.original,
        };
    }

    // UPDATE + DELETE = DELETE —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º original
    if (first.action === 'update' && second.action === 'delete') {
        return {
            ...second,
            original: first.original,
        };
    }

    // DELETE + CREATE = UPDATE (—É–¥–∞–ª–∏–ª–∏ –∏ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–Ω–æ–≤–æ)
    if (first.action === 'delete' && second.action === 'create') {
        return {
            ...second,
            action: 'update',
            original: first.original,
        };
    }

    return second;
}

// Actions
export const { addChange, clearContext, removeChange, clearAll } = scenarioChangesSlice.actions;

// Selectors
export const selectChangesState = (state: RootState): ChangesState => {
    console.log('üîç selectChangesState –≤—ã–∑–≤–∞–Ω, contexts:', Object.keys(state.scenarioChanges.contexts));
    return state.scenarioChanges;
};

export const selectContextChanges = (contextId: string) => (state: RootState): ChangesContext | undefined => {
    const context = state.scenarioChanges.contexts[contextId];
    console.log(`üîç selectContextChanges("${contextId}"):`, context !== undefined ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù');
    return context;
};

export const selectContextChangesArray = (contextId: string) => (state: RootState): readonly EntityChange[] => {
    const context = state.scenarioChanges.contexts[contextId];
    console.log(`üîç selectContextChangesArray("${contextId}"):`, {
        contextFound: context !== undefined,
        changesCount: context !== undefined ? Object.keys(context.changes).length : 0,
    });
    if (context === undefined) return [];
    return Object.values(context.changes);
};

export const selectHasChanges = (contextId: string) => (state: RootState): boolean => {
    const context = state.scenarioChanges.contexts[contextId];
    const result = context !== undefined && Object.keys(context.changes).length > 0;
    console.log(`üîç selectHasChanges("${contextId}"):`, result);
    return result;
};

export const selectChangesCount = (contextId: string) => (state: RootState): number => {
    const context = state.scenarioChanges.contexts[contextId];
    const count = context !== undefined ? Object.keys(context.changes).length : 0;
    console.log(`üîç selectChangesCount("${contextId}"):`, count);
    return count;
};

const slice = scenarioChangesSlice.reducer;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è persist –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
const changesPersistConfig = {
    key: 'scenarioChanges',
    storage,
    whitelist: ['contexts'] as const,
};

export const persistedChangesReducer = persistReducer(
    changesPersistConfig,
    slice
);