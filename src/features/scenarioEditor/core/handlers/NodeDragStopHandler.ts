// @scenario/core/handlers/NodeDragStopHandler.ts
import type React from 'react';
import type { FlowNode, FlowEdge } from '@/features/scenarioEditor/shared/contracts/models/FlowNode.ts';
import { FlowType } from '@scenario/core/ui/nodes/types/flowType.ts';

type Utils = {
    absOf: (n: FlowNode, all: FlowNode[]) => { x: number; y: number };
    rectOf: (n: FlowNode, all: FlowNode[]) => { x: number; y: number; w: number; h: number };
    ensureParentBeforeChild: (nodes: FlowNode[], parentId: string, childId: string) => FlowNode[];
    pickDeepestBranchByTopLeft: (
        all: FlowNode[],
        abs: { x: number; y: number },
        skipId?: string | undefined
    ) => FlowNode | undefined;
};

export type NodeDragStopDeps = {
    getAll: () => FlowNode[];
    getAllEdges: () => FlowEdge[];
    setNodes: React.Dispatch<React.SetStateAction<FlowNode[]>>;
    setEdges: React.Dispatch<React.SetStateAction<FlowEdge[]>>;
    setHoverBranch: (branchId: string | undefined) => void;
    shiftDragIdsRef: React.RefObject<Set<string>>;
    isBatchMoveRef?: React.RefObject<boolean>; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∏ –±–∞—Ç—á–∏–Ω–≥–µ
    utils: Utils;
    callbacks?: {
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–∏ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–µ)
        onStepMoved?: (stepId: string, x: number, y: number) => void;
        // –ü—Ä–∏–∫—Ä–µ–ø–∏–ª–∏/–ø–µ—Ä–µ–Ω–µ—Å–ª–∏ —à–∞–≥ –≤ –≤–µ—Ç–∫—É (–º–µ–Ω—è–µ–º branchId, x, y)
        onStepAttachedToBranch?: ((stepId: string, branchId: string, x: number, y: number) => void) | undefined;
        // –í—ã–Ω–µ—Å–ª–∏ —à–∞–≥ ¬´–Ω–∞ –ø–æ–ª–µ¬ª (–≤–Ω–µ –≤–µ—Ç–∫–∏) ‚Äî —É–¥–∞–ª–∏—Ç—å —à–∞–≥, –µ–≥–æ —Å–≤—è–∑–∏ –∏ —Å–∞–º—É –Ω–æ–¥—É –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        onStepDetachedFromBranch?: ((stepId: string) => void) | undefined;
        // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
        onConnectionRemoved?: ((sourceId: string, targetId: string, edgeId: string) => void) | undefined;
        // –ê–≤—Ç–æ-—Ä–æ—Å—Ç –≤–µ—Ç–∫–∏ –≤ UI
        onBranchResized?: ((
            branchId: string,
            width: number,
            height: number,
            newX?: number,
            newY?: number
        ) => void) | undefined;
    };
};

export class NodeDragStopHandler {
    private readonly getAll;
    private readonly getAllEdges;
    private readonly setNodes;
    private readonly setEdges;
    private readonly setHoverBranch;
    private readonly shiftDragIdsRef;
    private readonly isBatchMoveRef?: React.RefObject<boolean> | undefined; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
    private readonly u: Utils;
    private readonly callbacks?: NodeDragStopDeps['callbacks'];

    constructor(deps: NodeDragStopDeps) {
        this.getAll = deps.getAll;
        this.getAllEdges = deps.getAllEdges;
        this.setNodes = deps.setNodes;
        this.setEdges = deps.setEdges;
        this.setHoverBranch = deps.setHoverBranch;
        this.shiftDragIdsRef = deps.shiftDragIdsRef;
        this.isBatchMoveRef = deps.isBatchMoveRef; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        this.u = deps.utils;
        this.callbacks = deps.callbacks;
    }

    private removeNodeConnections = (nodeId: string): void => {
        const edges = this.getAllEdges();
        const connectedEdges = edges.filter(
            (e) => e.source === nodeId || e.target === nodeId
        );

        if (connectedEdges.length > 0) {
            console.log(
                `[NodeDragStopHandler] üóëÔ∏è Removing ${connectedEdges.length} connections for node ${nodeId}`
            );

            // –£–¥–∞–ª—è–µ–º —Ä—ë–±—Ä–∞ –∏–∑ UI
            this.setEdges((eds) => eds.filter((e) => e.source !== nodeId && e.target !== nodeId));

            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–±—Ä–∞
            for (const edge of connectedEdges) {
                this.callbacks?.onConnectionRemoved?.(edge.source, edge.target, edge.id);
            }
        }
    };

    private getNodeSize(node: FlowNode): { width: number; height: number } {
        const width =
            (typeof node.style?.width === 'number' ? node.style.width : node.measured?.width) ?? 0;
        const height =
            (typeof node.style?.height === 'number' ? node.style.height : node.measured?.height) ?? 0;
        return { width, height };
    }

    onNodeDragStop = (_e: React.MouseEvent | React.TouchEvent, node: FlowNode): void => {

        const all = this.getAll();
        const current = all.find((n) => n.id === node.id) ?? node;
        const absTL = this.u.absOf(current, all);
        const target = this.u.pickDeepestBranchByTopLeft(all, absTL, current.id);

        // –°–Ω—è—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ü–µ–ª–∏
        this.setHoverBranch(undefined);

        const wasShift = this.shiftDragIdsRef.current.has(current.id);
        if (wasShift) this.shiftDragIdsRef.current.delete(current.id);

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        // SHIFT + drag (–≤—ã–Ω–æ—Å –∏–∑ –≤–µ—Ç–∫–∏)
        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if (wasShift) {
            if (!target) {
                // –í—ã–Ω–µ—Å–ª–∏ ¬´–Ω–∞ –ø–æ–ª–µ¬ª —Å Shift: —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏ —Å–∞–º—É –Ω–æ–¥—É
                console.log(
                    `[NodeDragStopHandler] üîÄ SHIFT + DRAG TO FIELD | Node: ${current.id} | Removing connections and node`
                );

                // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –Ω–æ–¥—ã
                this.removeNodeConnections(current.id);

                // 2. –£–±–∏—Ä–∞–µ–º parentId –∏–∑ –Ω–æ–¥—ã (–¥–µ–ª–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ)
                this.setNodes((nds) =>
                    nds.map((n) => {
                        if (n.id !== current.id) return n;
                        const { parentId: _pid, extent: _ex, expandParent: _ep, ...rest } = n as FlowNode;
                        return { ...rest, position: { x: absTL.x, y: absTL.y } };
                    })
                );

                // 3. –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–≥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
                this.callbacks?.onStepDetachedFromBranch?.(current.id);
                return;
            }

            // Shift: –ø–µ—Ä–µ–Ω–æ—Å –≤ –î–†–£–ì–£–Æ –≤–µ—Ç–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º branchId –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π!)
            if (current.type !== FlowType.BranchNode) {
                const br = this.u.rectOf(target, all);
                const relX = absTL.x - br.x;
                const relY = absTL.y - br.y;

                console.log(
                    `[NodeDragStopHandler] üîÄ SHIFT + DRAG TO BRANCH | Node: ${current.id} | Target: ${target.id}`
                );

                this.setNodes((nds): FlowNode[] => {
                    let next = nds.map((n) =>
                        n.id === current.id
                            ? {
                                ...n,
                                parentId: target.id,
                                position: { x: relX, y: relY },
                                expandParent: true,
                            }
                            : n
                    );
                    next = this.u.ensureParentBeforeChild(next, target.id, current.id);
                    return next;
                });

                // –¢–æ–ª—å–∫–æ –∞–ø–¥–µ–π—Ç —à–∞–≥–∞: branchId + x,y
                this.callbacks?.onStepAttachedToBranch?.(current.id, target.id, absTL.x, absTL.y);
                return;
            }
        }

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        // –û–±—ã—á–Ω—ã–π drag (–±–µ–∑ Shift)
        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        console.log(
            `[NodeDragStopHandler] üîç Checking target | Target: ${target?.id} | Current type: ${current.type} | Is branch: ${current.type === FlowType.BranchNode}`
        );

        if (target && current.type !== FlowType.BranchNode) {
            const br = this.u.rectOf(target, all);

            console.log(
                `[NodeDragStopHandler] üéØ Target found | Target: ${target.id} | Current parent: ${current.parentId} | Same branch: ${current.parentId === target.id}`
            );

            // 1) –í–Ω—É—Ç—Ä–∏ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–∏ ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω –∞–≤—Ç–æ-—Ä–æ—Å—Ç, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–∫—Å–∏—Ä—É–µ–º
            if (current.parentId === target.id) {
                // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏ –∏–∑ REDUX STORE, –∞ –Ω–µ –∏–∑ UI
                // —Ç.–∫. UI –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–º setNodes
                const branchDto = target.data.object;
                const branchX = branchDto.x;
                const branchY = branchDto.y;
                const branchW = branchDto.width;
                const branchH = branchDto.height;

                // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Redux –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ—Ç–∫–∏
                const relX = absTL.x - branchX;
                const relY = absTL.y - branchY;
                const { width: childW, height: childH } = this.getNodeSize(current);

                console.log(
                    `[NodeDragStopHandler] üìè Step size: ${childW}x${childH} | Branch: ${branchW}x${branchH} | Position: ${relX},${relY} (abs: ${absTL.x},${absTL.y}) | Redux branch pos: (${branchX},${branchY})`
                );

                if (childW > 0 && childH > 0) {
                    const pad = 12;

                    // –í—ã—á–∏—Å–ª—è–µ–º —Å–¥–≤–∏–≥ –≤–µ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                    const deltaX = relX < 0 ? Math.abs(relX) + pad : 0;
                    const deltaY = relY < 0 ? Math.abs(relY) + pad : 0;

                    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    const needW = Math.max(branchW, (relX < 0 ? 0 : relX) + childW + pad) + deltaX;
                    const needH = Math.max(branchH, (relY < 0 ? 0 : relY) + childH + pad) + deltaY;

                    // –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏
                    const newBranchX = branchX - deltaX;
                    const newBranchY = branchY - deltaY;

                    const needsResize = needW !== branchW || needH !== branchH || deltaX > 0 || deltaY > 0;

                    if (needsResize) {
                        console.log(
                            `[NodeDragStopHandler] üìê Branch expansion: pos(${branchX},${branchY})‚Üí(${newBranchX},${newBranchY}) size(${branchW}x${branchH})‚Üí(${needW}x${needH}) delta(${deltaX},${deltaY})`
                        );

                        this.setNodes((nds): FlowNode[] => {
                            return nds.map((n) => {
                                // –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≤–µ—Ç–∫—É (–ø–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã)
                                if (n.id === target.id) {
                                    return {
                                        ...n,
                                        position: { x: newBranchX, y: newBranchY },
                                        style: { ...(n.style ?? {}), width: needW, height: needH }
                                    };
                                }

                                // –î–æ—á–µ—Ä–Ω–∏–µ —Å—Ç–µ–ø—ã –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –≤ UI
                                // –ò—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ mapScenarioToFlow
                                // –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ—Ç–∫–∏ –≤ Redux

                                return n;
                            });
                        });

                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –≤—ã–∑—ã–≤–∞–µ–º onBranchResized –ø—Ä–∏ –±–∞—Ç—á–∏–Ω–≥–µ
                        // –ë–∞—Ç—á–∏–Ω–≥ —Å–∞–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –≤–µ—Ç–æ–∫
                        if (!this.isBatchMoveRef?.current) {
                            this.callbacks?.onBranchResized?.(
                                target.id,
                                needW,
                                needH,
                                newBranchX,
                                newBranchY
                            );
                        } else {
                            console.log(`[NodeDragStopHandler] ‚è∏Ô∏è Skipping auto-resize during batch move`);
                        }
                    }
                }

                this.callbacks?.onStepMoved?.(current.id, absTL.x, absTL.y);
                return;
            }

            // 2) –ü–µ—Ä–µ–Ω–æ—Å –≤ –î–†–£–ì–£–Æ –≤–µ—Ç–∫—É (–æ–±—ã—á–Ω—ã–π drag –±–µ–∑ Shift) ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º branchId –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            const relX = absTL.x - br.x;
            const relY = absTL.y - br.y;
            const { width: childW, height: childH } = this.getNodeSize(current);

            this.setNodes((nds): FlowNode[] => {
                let next = nds.map((n) =>
                    n.id === current.id
                        ? {
                            ...n,
                            parentId: target.id,
                            position: { x: relX, y: relY },
                            expandParent: true,
                        }
                        : n
                );

                next = this.u.ensureParentBeforeChild(next, target.id, current.id);

                if (childW > 0 && childH > 0) {
                    const pad = 12;
                    const needW = Math.max(br.w, relX + childW + pad);
                    const needH = Math.max(br.h, relY + childH + pad);
                    next = next.map((n) =>
                        n.id === target.id
                            ? { ...n, style: { ...(n.style ?? {}), width: needW, height: needH } }
                            : n
                    );
                }
                return next;
            });

            this.callbacks?.onStepAttachedToBranch?.(current.id, target.id, absTL.x, absTL.y);

            // –î—É–±–ª–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –∞–≤—Ç–æ-—Ä–æ—Å—Ç–µ –≤–µ—Ç–∫–∏
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –≤—ã–∑—ã–≤–∞–µ–º onBranchResized –ø—Ä–∏ –±–∞—Ç—á–∏–Ω–≥–µ
            if (childW > 0 && childH > 0 && !this.isBatchMoveRef?.current) {
                const pad = 12;
                const needW = Math.max(br.w, relX + childW + pad);
                const needH = Math.max(br.h, relY + childH + pad);
                this.callbacks?.onBranchResized?.(target.id, needW, needH);
            }
            return;
        }

        // –ë–µ–∑ Shift ‚Äî ¬´–Ω–∞ –ø–æ–ª–µ¬ª –Ω–µ —É—Ö–æ–¥–∏–º
    };
}