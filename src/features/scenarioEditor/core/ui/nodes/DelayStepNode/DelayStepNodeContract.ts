// src/features/scenarioEditor/core/ui/nodes/DelayStepNode/DelayStepNodeContract.ts

import { FlowType } from '@scenario/core/ui/nodes/types/flowType';
import type { NodeTypeContract } from '@scenario/shared/contracts/registry/NodeTypeContract';
import type { DelayStepDto } from '@scenario/shared/contracts/server/remoteServerDtos/ScenarioDtos/Steps/StepBaseDto';
import type { EntitySnapshot, Entity } from '@scenario/core/features/historySystem/types';
import type { Guid } from '@app/lib/types/Guid';
import { store } from '@/baseStore/store';
import { updateStep, addStep, deleteStep } from '@scenario/store/scenarioSlice';
import { DelayStepNode } from './DelayStepNode';

export const DelayStepNodeContract: NodeTypeContract<DelayStepDto> = {
    // ============================================================================
    // –ë–ê–ó–û–í–´–ï –ü–û–õ–Ø
    // ============================================================================

    type: FlowType.Delay,
    displayName: '–ó–∞–¥–µ—Ä–∂–∫–∞',
    Component: DelayStepNode as any,

    // ============================================================================
    // –ú–ê–ü–ü–ò–ù–ì DTO ‚Üî Node
    // ============================================================================

    mapFromDto: (dto, parentId) => ({
        id: dto.id,
        type: FlowType.Delay,
        position: { x: dto.x, y: dto.y },
        data: {
            object: dto,
            x: dto.x,
            y: dto.y,
        },
        style: {
            width: dto.width,
            height: dto.height,
        },
        parentId,
        draggable: true,
        selectable: true,
        expandParent: true,
    }),

    mapToDto: (node) => node.data.object,

    // ============================================================================
    // –û–ü–ï–†–ê–¶–ò–ò –° –ù–û–î–û–ô (—Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã–π DTO)
    // ============================================================================

    createMoveEntity: (dto, newX, newY) => ({
        ...dto,
        x: newX,
        y: newY,
    }),

    createResizeEntity: (dto, newWidth, newHeight, newX, newY) => ({
        ...dto,
        x: newX ?? dto.x,
        y: newY ?? dto.y,
        width: newWidth,
        height: newHeight,
    }),

    createAutoExpandEntity: (dto, newWidth, newHeight, newX, newY) => {
        // –î–ª—è —Å—Ç–µ–ø–æ–≤ auto-expand –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ç–æ–∫)
        console.warn('[DelayStepNodeContract] Auto-expand not supported for steps', newWidth, newHeight, newX, newY);
        return dto;
    },

    createAttachToBranchEntity: (dto, branchId, newX, newY) => ({
        ...dto,
        branchId,
        x: newX,
        y: newY,
    }),

    createDetachFromBranchEntity: (dto, newX, newY) => ({
        ...dto,
        branchId: '', // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –æ—Ç –≤–µ—Ç–∫–∏
        x: newX,
        y: newY,
    }),

    // ============================================================================
    // –í–ê–õ–ò–î–ê–¶–ò–Ø –û–ü–ï–†–ê–¶–ò–ô
    // ============================================================================

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è validateOperation –¥–ª—è DelayStepNodeContract.ts
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞

    validateOperation: (operation, dto, params) => {
        switch (operation) {
            case 'move':
                // ReactFlow –¥–æ–ø—É—Å–∫–∞–µ—Ç –ª—é–±—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                return { valid: true };

            case 'resize':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                const { newWidth, newHeight } = params as { newWidth: number; newHeight: number };
                if (newWidth < 100 || newHeight < 60) {
                    return { valid: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100x60' };
                }
                return { valid: true };

            case 'attach':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ branchId –Ω–µ –ø—É—Å—Ç–æ–π
                const { branchId } = params as { branchId: Guid };
                if (!branchId) {
                    return { valid: false, error: 'branchId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
                }
                return { valid: true };

            case 'detach':
                // –°—Ç–µ–ø –º–æ–∂–Ω–æ –æ—Ç—Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ–≥–¥–∞
                return { valid: true };

            case 'delete':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —Å–≤—è–∑–µ–π
                if (dto.childRelations && dto.childRelations.length > 0) {
                    return {
                        valid: false,
                        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–µ–ø —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —Å–≤—è–∑—è–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å–≤—è–∑–∏.',
                    };
                }
                return { valid: true };

            default:
                return { valid: true };
        }
    },

    // ============================================================================
    // –•–£–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
    // ============================================================================

    onCreated: (dto) => {
        console.log(`[DelayStepNodeContract]  Created step: ${dto.id}`, dto);
    },

    onBeforeDelete: (dto) => {
        console.log(`[DelayStepNodeContract] üóëÔ∏è Deleting step: ${dto.id}`, dto);

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å–≤—è–∑–µ–π
        if (dto.childRelations && dto.childRelations.length > 0) {
            console.warn('[DelayStepNodeContract] Step has child relations, cleaning up...');
            // TODO: –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ Redux
        }
    },

    onUpdated: (previousDto, newDto) => {
        console.log(`[DelayStepNodeContract] üìù Updated step: ${newDto.id}`, {
            previous: previousDto,
            new: newDto,
        });
    },

    // ============================================================================
    // –ú–ï–¢–û–î–´ –ò–°–¢–û–†–ò–ò
    // ============================================================================

    createSnapshot: (dto): EntitySnapshot<Entity> => ({
        entityId: dto.id,
        entityType: FlowType.Delay,
        data: {
            ...dto,
            entityType: FlowType.Delay,
        } as Entity,
        timestamp: Date.now(),
    }),

    applySnapshot: (snapshot) => {
        console.log('[DelayStepNodeContract] Applying snapshot:', snapshot);

        // –£–±–∏—Ä–∞–µ–º entityType –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Redux
        const { entityType, ...dto } = snapshot.data;

        store.dispatch(
            updateStep({
                stepId: dto.id,
                changes: dto as any,
            })
        );
    },

    revertSnapshot: (snapshot) => {
        console.log('[DelayStepNodeContract] Reverting snapshot:', snapshot);

        // –£–±–∏—Ä–∞–µ–º entityType –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Redux
        const { entityType, ...dto } = snapshot.data;

        store.dispatch(
            updateStep({
                stepId: dto.id,
                changes: dto as any,
            })
        );
    },

    createFromSnapshot: (snapshot) => {
        console.log('[DelayStepNodeContract] Creating from snapshot:', snapshot);

        // –£–±–∏—Ä–∞–µ–º entityType –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Redux
        const { entityType, ...dto } = snapshot.data;

        store.dispatch(
            addStep({
                branchId: (dto as any).branchId,
                step: dto as any,
            })
        );
    },

    deleteEntity: (entityId) => {
        console.log('[DelayStepNodeContract] Deleting entity:', entityId);

        const state = store.getState();
        const step = state.scenario.steps[entityId];

        if (step) {
            store.dispatch(
                deleteStep({
                    branchId: step.branchId,
                    stepId: entityId,
                })
            );
        } else {
            console.warn(`[DelayStepNodeContract] Step ${entityId} not found for deletion`);
        }
    },
} as const;