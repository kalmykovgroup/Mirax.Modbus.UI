// src/features/scenarioEditor/core/ui/nodes/BranchNode/BranchNode.tsx
import { useEffect } from 'react';
import { Handle, type NodeProps, type Node, Position, useReactFlow } from '@xyflow/react';
import { useSelector } from 'react-redux';
import styles from './BranchNode.module.css';
import { formatWithMode } from '@app/lib/utils/format';
import { FlowType } from '@scenario/core/ui/nodes/types/flowType.ts';
import type { FlowNodeData } from '@/features/scenarioEditor/shared/contracts/models/FlowNodeData';
import type { BranchDto } from '@scenario/shared/contracts/server/remoteServerDtos/ScenarioDtos/Branch/BranchDto';
import { useCtrlKey } from "@app/lib/hooks/useCtrlKey.ts";
import { useShiftKey } from "@app/lib/hooks/useShiftKey.ts";
import { useScenarioOperationsContext } from '@scenario/core/ui/map/ScenarioMap/contexts/ScenarioOperationsContext';
import type { RootState } from '@/baseStore/store';
import type { FlowNode } from '@/features/scenarioEditor/shared/contracts/models/FlowNode';

type Props = NodeProps<Node<FlowNodeData<BranchDto>>>;

export function BranchNode({ data, selected, id }: Props) {
    const isCtrlPressed = useCtrlKey();
    const isShiftPressed = useShiftKey();
    const rf = useReactFlow<FlowNode>();
    const operations = useScenarioOperationsContext();

    const handleType = data.connectContext?.from.handleType;
    const type = data.connectContext?.from.type;
    const isConnectValid =
        type !== FlowType.BranchNode &&
        (type === FlowType.Condition || type === FlowType.Parallel);

    // –ü–æ–ª—É—á–∞–µ–º DTO –≤–µ—Ç–∫–∏ –∏–∑ Redux store
    const branchDto = data.object as BranchDto;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–µ–ø–æ–≤ –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ —á–µ—Ä–µ–∑ Redux
    const childSteps = useSelector((state: RootState) => {
        if (!branchDto?.scenarioId) return [];
        const scenario = state.scenario.scenarios[branchDto.scenarioId];
        if (!scenario) return [];

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–µ–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–π –≤–µ—Ç–∫–µ
        return Object.values(scenario.steps).filter(step => step.branchId === id);
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç–µ–ø–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–µ—Ç–∫—É
    useEffect(() => {
        if (childSteps.length === 0) return;

        const branchX = branchDto.x;
        const branchY = branchDto.y;
        const currentWidth = branchDto.width ?? 300;
        const currentHeight = branchDto.height ?? 100;

        let minRelX = 0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)
        let minRelY = 0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)
        let maxX = 0;
        let maxY = 0;
        const padding = 12;

        console.log(`[BranchNode] üìê Calculating size for branch ${id}`, {
            childCount: childSteps.length,
            branchPos: { x: branchX, y: branchY },
        });

        for (const step of childSteps) {
            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ Redux (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
            const stepX = step.x;
            const stepY = step.y;
            const stepWidth = step.width ?? 100;
            const stepHeight = step.height ?? 71;

            // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –≤–µ—Ç–∫–∏
            const relX = stepX - branchX;
            const relY = stepY - branchY;

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö)
            minRelX = Math.min(minRelX, relX);
            minRelY = Math.min(minRelY, relY);

            const rightEdge = relX + stepWidth + padding;
            const bottomEdge = relY + stepHeight + padding;

            console.log(`[BranchNode]   Step ${step.id.substring(0, 8)}:`, {
                absPos: { x: stepX, y: stepY },
                relPos: { x: Math.round(relX), y: Math.round(relY) },
                size: { w: stepWidth, h: stepHeight },
                edges: { right: Math.round(rightEdge), bottom: Math.round(bottomEdge) },
            });

            maxX = Math.max(maxX, rightEdge);
            maxY = Math.max(maxY, bottomEdge);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–¥–≤–∏–≥ –≤–µ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const deltaX = minRelX < 0 ? Math.abs(minRelX) + padding : 0;
        const deltaY = minRelY < 0 ? Math.abs(minRelY) + padding : 0;

        console.log(`[BranchNode] üìê Min relative coords:`, {
            minRelX: Math.round(minRelX),
            minRelY: Math.round(minRelY),
            delta: { x: deltaX, y: deltaY },
            maxEdges: { x: Math.round(maxX), y: Math.round(maxY) }
        });

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã:
        // –®–∏—Ä–∏–Ω–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å–∞–º–æ–π –ª–µ–≤–æ–π –¥–æ —Å–∞–º–æ–π –ø—Ä–∞–≤–æ–π —Ç–æ—á–∫–∏
        // needW = maxX - minRelX (–µ—Å–ª–∏ minRelX –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, —ç—Ç–æ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        const needW = Math.max(300, maxX - minRelX);
        const needH = Math.max(100, maxY - minRelY);

        // –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏ (—Å–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ/–≤–≤–µ—Ä—Ö –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        const newBranchX = branchX + minRelX - padding;
        const newBranchY = branchY + minRelY - padding;

        const needsResize = needW !== currentWidth || needH !== currentHeight || deltaX > 0 || deltaY > 0;

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –≤—ã–∑—ã–≤–∞–µ–º autoExpandBranch
        if (needsResize) {
            console.log(`[BranchNode] üìê Auto-expanding branch ${id}`, {
                from: { x: branchX, y: branchY, width: currentWidth, height: currentHeight },
                to: { x: newBranchX, y: newBranchY, width: needW, height: needH },
                childSteps: childSteps.length,
            });

            const branchNode = rf.getNodes().find((n) => n.id === id);
            if (branchNode) {
                // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–¥–≤–∏–≥
                operations.autoExpandBranch(
                    branchNode,
                    needW,
                    needH,
                    deltaX > 0 || deltaY > 0 ? newBranchX : undefined,
                    deltaX > 0 || deltaY > 0 ? newBranchY : undefined
                );
            }
        }
    }, [childSteps, branchDto, id, rf, operations]);

    return (
        <div
            className={styles.branchNodeContainer}
            aria-selected={selected}
            data-ctrl-mode={isCtrlPressed}
            data-shift-mode={isShiftPressed}
            data-draggable={isCtrlPressed}
            data-selectable={isCtrlPressed}
        >
            <div className={styles.bg} />

            <span className={styles.coordinates}>
                <span>x:{formatWithMode(data.x, 2, true)}</span>
                <span>y:{formatWithMode(data.y, 2, true)}</span>
            </span>

            <span className={styles.name}>
                –í–µ—Ç–∫–∞ {isCtrlPressed && '(Ctrl)'} {isShiftPressed && '(Shift)'}
            </span>

            <Handle
                className={styles.target}
                aria-selected={handleType === 'source' && isConnectValid}
                key="t1"
                id="t1"
                type="target"
                position={Position.Left}
            />
        </div>
    );
}