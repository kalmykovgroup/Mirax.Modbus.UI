// src/features/scenarioEditor/core/ui/nodes/BranchNode/BranchNode.tsx
import { useEffect, useRef } from 'react';
import { Handle, type NodeProps, type Node, Position, useReactFlow } from '@xyflow/react';
import { useSelector } from 'react-redux';
import styles from './BranchNode.module.css';
import { formatWithMode } from '@app/lib/utils/format';
import { FlowType } from '@scenario/core/ui/nodes/types/flowType.ts';
import type { FlowNodeData } from '@/features/scenarioEditor/shared/contracts/models/FlowNodeData';
import type { BranchDto } from '@scenario/shared/contracts/server/remoteServerDtos/ScenarioDtos/Branch/BranchDto';
import { useCtrlKey } from "@app/lib/hooks/useCtrlKey.ts";
import { useShiftKey } from "@app/lib/hooks/useShiftKey.ts";
import { useScenarioOperationsContext } from '@scenario/core/ui/map/ScenarioMap/contexts/ScenarioOperationsContext';
import type { RootState } from '@/baseStore/store';
import type { FlowNode } from '@/features/scenarioEditor/shared/contracts/models/FlowNode';

type Props = NodeProps<Node<FlowNodeData<BranchDto>>>;

export function BranchNode({ data, selected, id }: Props) {
    const isCtrlPressed = useCtrlKey();
    const isShiftPressed = useShiftKey();
    const rf = useReactFlow<FlowNode>();
    const operations = useScenarioOperationsContext();

    const handleType = data.connectContext?.from.handleType;
    const type = data.connectContext?.from.type;
    const isConnectValid =
        type !== FlowType.BranchNode &&
        (type === FlowType.Condition || type === FlowType.Parallel);

    // –ü–æ–ª—É—á–∞–µ–º DTO –≤–µ—Ç–∫–∏ –∏–∑ Redux store
    const branchDto = data.object as BranchDto;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏ –ò —Å—Ç–µ–ø–æ–≤ –∏–∑ Redux –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏ –∏–∑ –¢–û–ì–û –ñ–ï —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º shallowEqual –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const branchAndStepsData = useSelector(
        (state: RootState) => {
            if (!branchDto?.scenarioId) return null;
            const scenario = state.scenario.scenarios[branchDto.scenarioId];
            if (!scenario) return null;

            const branch = scenario.branches?.[id];
            if (!branch) return null;

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏ –∏ —Å—Ç–µ–ø–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
            const steps = Object.values(scenario.steps)
                .filter(step => step.branchId === id)
                .map(step => ({
                    id: step.id,
                    x: step.x,
                    y: step.y,
                    width: step.width ?? 100,
                    height: step.height ?? 71
                }));

            return {
                branchX: branch.x,
                branchY: branch.y,
                branchWidth: branch.width ?? 300,
                branchHeight: branch.height ?? 100,
                steps
            };
        },
        // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
        (prev, next) => {
            if (prev === next) return true;
            if (!prev || !next) return false;

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ç–∫–∏
            if (
                prev.branchX !== next.branchX ||
                prev.branchY !== next.branchY ||
                prev.branchWidth !== next.branchWidth ||
                prev.branchHeight !== next.branchHeight ||
                prev.steps.length !== next.steps.length
            ) {
                return false;
            }

            // –ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç–µ–ø–æ–≤
            for (let i = 0; i < prev.steps.length; i++) {
                const s1 = prev.steps[i];
                const s2 = next.steps[i];

                // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
                if (!s1 || !s2) return false;

                if (
                    s1.id !== s2.id ||
                    s1.x !== s2.x ||
                    s1.y !== s2.y ||
                    s1.width !== s2.width ||
                    s1.height !== s2.height
                ) {
                    return false;
                }
            }

            // –î–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º
            return true;
        }
    );

    // Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
    const lastAppliedSizeRef = useRef<{ x: number; y: number; width: number; height: number } | null>(null);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç–µ–ø–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –≤–µ—Ç–∫—É
    useEffect(() => {
        if (!branchAndStepsData || branchAndStepsData.steps.length === 0) return;

        const { branchX, branchY, branchWidth: currentWidth, branchHeight: currentHeight, steps: childSteps } = branchAndStepsData;

        const padding = 12;

        // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö —Å—Ç–µ–ø–æ–≤ –≤ –ê–ë–°–û–õ–Æ–¢–ù–´–• –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        let minAbsX = Infinity;
        let minAbsY = Infinity;
        let maxAbsX = -Infinity;
        let maxAbsY = -Infinity;

        for (const step of childSteps) {
            minAbsX = Math.min(minAbsX, step.x);
            minAbsY = Math.min(minAbsY, step.y);
            maxAbsX = Math.max(maxAbsX, step.x + (step.width ?? 100));
            maxAbsY = Math.max(maxAbsY, step.y + (step.height ?? 71));
        }

        // –í–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å—Ç–µ–ø—ã —Å padding —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω
        // –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ç–∫–∏ = —Å–∞–º—ã–π –ª–µ–≤—ã–π —Å—Ç–µ–ø - padding
        // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ç–∫–∏ = —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Å—Ç–µ–ø - padding
        const newBranchX = minAbsX - padding;
        const newBranchY = minAbsY - padding;

        // –®–∏—Ä–∏–Ω–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –¥–æ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è + padding —Å–ø—Ä–∞–≤–∞
        // –í—ã—Å–æ—Ç–∞ = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –¥–æ –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è + padding —Å–Ω–∏–∑—É
        const needW = Math.max(300, (maxAbsX - minAbsX) + padding * 2);
        const needH = Math.max(100, (maxAbsY - minAbsY) + padding * 2);

        // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ü–û–°–õ–ï–î–ù–ò–ú–ò –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏, –∞ –Ω–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–∑ props
        // –≠—Ç–æ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Ü–∏–∫–ª: autoExpandBranch ‚Üí Redux ‚Üí props ‚Üí useEffect ‚Üí autoExpandBranch
        const lastApplied = lastAppliedSizeRef.current;
        const needsResize =
            !lastApplied ||  // –ü–µ—Ä–≤—ã–π —Ä–∞–∑
            Math.round(lastApplied.x) !== Math.round(newBranchX) ||
            Math.round(lastApplied.y) !== Math.round(newBranchY) ||
            Math.round(lastApplied.width) !== Math.round(needW) ||
            Math.round(lastApplied.height) !== Math.round(needH);

        // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –≤—ã–∑—ã–≤–∞–µ–º autoExpandBranch
        if (needsResize) {
            console.log(`[BranchNode] üìê Auto-expanding branch ${id}`, {
                from: { x: branchX, y: branchY, width: currentWidth, height: currentHeight },
                to: { x: newBranchX, y: newBranchY, width: needW, height: needH },
                lastApplied,
                childSteps: childSteps.length,
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ ref –î–û –≤—ã–∑–æ–≤–∞ autoExpandBranch
            lastAppliedSizeRef.current = {
                x: Math.round(newBranchX),
                y: Math.round(newBranchY),
                width: Math.round(needW),
                height: Math.round(needH)
            };

            const branchNode = rf.getNodes().find((n) => n.id === id);
            if (branchNode) {
                // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                operations.autoExpandBranch(
                    branchNode,
                    Math.round(needW),
                    Math.round(needH),
                    Math.round(newBranchX),
                    Math.round(newBranchY)
                );
            }
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [branchAndStepsData, id]); // ‚Üê rf –∏ operations —Å—Ç–∞–±–∏–ª—å–Ω—ã, –Ω–µ –Ω—É–∂–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

    return (
        <div
            className={styles.branchNodeContainer}
            aria-selected={selected}
            data-ctrl-mode={isCtrlPressed}
            data-shift-mode={isShiftPressed}
            data-draggable={isCtrlPressed}
            data-selectable={isCtrlPressed}
        >
            <div className={styles.bg} />

            <span className={styles.coordinates}>
                <span>x:{formatWithMode(data.x, 2, true)}</span>
                <span>y:{formatWithMode(data.y, 2, true)}</span>
            </span>

            <span className={styles.name}>
                –í–µ—Ç–∫–∞ {isCtrlPressed && '(Ctrl)'} {isShiftPressed && '(Shift)'}
            </span>

            <Handle
                className={styles.target}
                aria-selected={handleType === 'source' && isConnectValid}
                key="t1"
                id="t1"
                type="target"
                position={Position.Left}
            />
        </div>
    );
}