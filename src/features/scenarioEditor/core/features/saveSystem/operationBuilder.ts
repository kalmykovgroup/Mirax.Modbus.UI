// src/features/scenarioEditor/core/features/saveSystem/operationBuilder.ts

import type { HistoryRecord, BatchRecord } from '@scenario/core/features/historySystem/types';
import type { ScenarioOperationDto } from '@scenario/shared/contracts/server/remoteServerDtos/ScenarioDtos/ScenarioOperationDto';
import { DbActionType } from '@scenario/shared/contracts/server/types/Api.Shared/Scenario/DbActionType';
import { DbEntityType } from '@scenario/shared/contracts/server/types/Api.Shared/Scenario/DbEntityType';

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ entityType –≤ DbEntityType
 */
const ENTITY_TYPE_MAP: Record<string, DbEntityType> = {
    'BranchNode': DbEntityType.Branch,
    'DelayStepNode': DbEntityType.Step,
    'ActivitySystemNode': DbEntityType.Step,
    'SignalStepNode': DbEntityType.Step,
    'ActivityModbusNode': DbEntityType.Step,
    'ParallelStepNode': DbEntityType.Step,
    'JumpStepNode': DbEntityType.Step,
    'ConditionStepNode': DbEntityType.Step,
    'StepRelation': DbEntityType.StepRelation,
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç entityType –≤ DbEntityType
 */
function mapEntityType(entityType: string): DbEntityType {
    const mapped = ENTITY_TYPE_MAP[entityType];

    if (!mapped) {
        console.warn(`[operationBuilder] Unknown entityType: ${entityType}, defaulting to Step`);
        return DbEntityType.Step;
    }

    return mapped;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç payload –∏–∑ —Å–Ω–∏–º–∫–∞
 * –°–Ω–∏–º–∫–∏ –∏–º–µ—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: { entityId, entityType, data, timestamp }
 * –ù–∞–º –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å data (—ç—Ç–æ –∏ –µ—Å—Ç—å DTO —Å—É—â–Ω–æ—Å—Ç–∏)
 */
function extractPayload(snapshot: any): unknown {
    if (!snapshot) return null;

    // –ï—Å–ª–∏ —ç—Ç–æ EntitySnapshot - –±–µ—Ä—ë–º data
    if (snapshot.data) {
        return snapshot.data;
    }

    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return snapshot;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏—é
 */
function convertRecordToOperation(record: HistoryRecord): ScenarioOperationDto | null {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º batch –∑–∞–ø–∏—Å–∏ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if (record.type === 'batch') {
        return null;
    }

    let action: DbActionType;
    let payload: unknown;

    switch (record.type) {
        case 'create':
            action = DbActionType.Create;
            payload = extractPayload(record.after);
            break;

        case 'update':
            action = DbActionType.Update;
            payload = extractPayload(record.after);
            break;

        case 'delete':
            action = DbActionType.Delete;
            payload = extractPayload(record.before);
            break;

        default:
            console.warn('[operationBuilder] Unknown record type:', (record as any).type);
            return null;
    }

    if (!payload) {
        console.warn('[operationBuilder] No payload for record:', record);
        return null;
    }

    const operation: ScenarioOperationDto = {
        opId: record.id,
        entity: mapEntityType(record.entityType),
        action,
        payload,
    };

    return operation;
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏
 */
function processRecords(records: HistoryRecord[]): ScenarioOperationDto[] {
    const operations: ScenarioOperationDto[] = [];

    for (const record of records) {
        if (record.type === 'batch') {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤–Ω—É—Ç—Ä–∏ –±–∞—Ç—á–∞
            const batchRecord = record as BatchRecord;
            const batchOps = processRecords(batchRecord.records);
            operations.push(...batchOps);
        } else {
            // –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å
            const operation = convertRecordToOperation(record);
            if (operation) {
                operations.push(operation);
            }
        }
    }

    return operations;
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é –≤ –æ–¥–Ω—É —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
 *
 * –õ–æ–≥–∏–∫–∞:
 * - Create + Update(s) = Create (—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
 * - Create + Delete = –Ω–∏—á–µ–≥–æ (—Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
 * - Update(s) = Update (—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
 * - Update(s) + Delete = Delete (—Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
 * - Delete –æ—Å—Ç–∞—ë—Ç—Å—è Delete
 */
function mergeOperations(operations: ScenarioOperationDto[]): ScenarioOperationDto[] {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ entityId
    const operationsByEntity = new Map<string, ScenarioOperationDto[]>();

    for (const op of operations) {
        const payload = op.payload as any;
        const entityId = payload?.id;

        if (!entityId) {
            console.warn('[operationBuilder] Operation without entityId, skipping:', op);
            continue;
        }

        const key = `${entityId}`;

        if (!operationsByEntity.has(key)) {
            operationsByEntity.set(key, []);
        }

        operationsByEntity.get(key)!.push(op);
    }

    const mergedOperations: ScenarioOperationDto[] = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ü–∏–π
    for (const [entityKey, entityOps] of operationsByEntity.entries()) {
        if (entityOps.length === 0) continue;

        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è - –±–µ—Ä—ë–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
        if (entityOps.length === 1) {
            mergedOperations.push(entityOps[0]);
            continue;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        const firstOp = entityOps[0];
        const lastOp = entityOps[entityOps.length - 1];

        // Create + ... + Delete = –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞)
        if (firstOp.action === DbActionType.Create && lastOp.action === DbActionType.Delete) {
            console.log(`[operationBuilder] Skipping Create+Delete for entity: ${entityKey}`);
            continue;
        }

        // Create + Update(s) = Create —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (firstOp.action === DbActionType.Create && lastOp.action !== DbActionType.Delete) {
            mergedOperations.push({
                ...lastOp, // –ë–µ—Ä—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                action: DbActionType.Create, // –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ Create
                opId: firstOp.opId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            });
            console.log(`[operationBuilder] Merged Create+Updates for entity: ${entityKey}`);
            continue;
        }

        // Update(s) + Delete = Delete —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (lastOp.action === DbActionType.Delete) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é Update, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ before
            const firstUpdate = entityOps.find(op => op.action === DbActionType.Update);

            // –ï—Å–ª–∏ –µ—Å—Ç—å Update, –±–µ—Ä—ë–º –µ–≥–æ before –∫–∞–∫ payload –¥–ª—è Delete
            if (firstUpdate) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º before –∏–∑ –ø–µ—Ä–≤–æ–≥–æ Update
                const historyRecord = historyRecords.find(r => r.id === firstUpdate.opId);
                const beforePayload = historyRecord && historyRecord.type === 'update'
                    ? extractPayload(historyRecord.before)
                    : firstUpdate.payload;

                mergedOperations.push({
                    ...lastOp,
                    payload: beforePayload, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                });
            } else {
                mergedOperations.push(lastOp);
            }

            console.log(`[operationBuilder] Merged Updates+Delete for entity: ${entityKey}`);
            continue;
        }

        // Update(s) = Update —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (lastOp.action === DbActionType.Update) {
            mergedOperations.push(lastOp);
            console.log(`[operationBuilder] Merged ${entityOps.length} Updates for entity: ${entityKey}`);
            continue;
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
        mergedOperations.push(lastOp);
    }

    return mergedOperations;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ –º–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
 *
 * @param historyRecords - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏–∑ history.past
 * @returns –ú–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
export function buildOperationsFromHistory(
    historyRecords: HistoryRecord[]
): ScenarioOperationDto[] {
    console.log('[operationBuilder] Building operations from history:', historyRecords.length, 'records');

    const operations = processRecords(historyRecords);

    console.log('[operationBuilder] Extracted', operations.length, 'raw operations');

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é
    const mergedOperations = mergeOperations(operations);

    console.log('[operationBuilder] After merge:', mergedOperations.length, 'operations');

    return mergedOperations;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI (–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
 */
export function formatOperationForDisplay(operation: ScenarioOperationDto): string {
    const actionIcon = {
        [DbActionType.Create]: 'üìù',
        [DbActionType.Update]: '‚úèÔ∏è',
        [DbActionType.Delete]: 'üóëÔ∏è',
    }[operation.action] || '‚ùì';

    const entityName = {
        [DbEntityType.Step]: 'Step',
        [DbEntityType.Branch]: 'Branch',
        [DbEntityType.StepRelation]: 'Relation',
        [DbEntityType.ConditionStepBranchRelation]: 'Condition Branch Relation',
        [DbEntityType.ParallelStepBranchRelation]: 'Parallel Branch Relation',
    }[operation.entity] || 'Unknown';

    const payload = operation.payload as any;
    const entityId = payload?.id || 'unknown';
    const entityLabel = payload?.name || payload?.label || entityId;

    return `${actionIcon} ${operation.action} ${entityName}: ${entityLabel}`;
}