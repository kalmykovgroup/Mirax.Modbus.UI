// src/features/scenarioEditor/core/services/NodeUpdateService.ts
import type { AppDispatch } from '@/baseStore/store';
import type { Guid } from '@app/lib/types/Guid';
import type { FlowNode } from '@/features/scenarioEditor/shared/contracts/models/FlowNode';
import { FlowType } from '@scenario/core/ui/nodes/types/flowType.ts';
import { updateStep, updateBranch } from '@scenario/store/scenarioSlice';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥.
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–æ–¥—ã –ø–æ FlowType –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—à–µ–Ω Redux.
 */
export class NodeUpdateService {

    private readonly dispatch: AppDispatch

    constructor(dispatch: AppDispatch) {
        this.dispatch = dispatch;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã.
     * –ù–æ–¥–∞ —Å–∞–º–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å–≤–æ–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–µ—Ä–≤–∏—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö.
     */
    updateNodeData<T = unknown>(node: FlowNode<T>, changes: Record<string, unknown>): void {
        const nodeId = node.id as Guid;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–æ–¥—ã –ø–æ FlowType
        if (node.type === FlowType.BranchNode) {
            this.dispatch(
                updateBranch({
                    branchId: nodeId,
                    changes: changes as any,
                })
            );
        } else {
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã ‚Äî —ç—Ç–æ —à–∞–≥–∏
            this.dispatch(
                updateStep({
                    stepId: nodeId,
                    changes: changes as any,
                })
            );
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–¥—ã.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è drag.
     */
    updateNodePosition(node: FlowNode, x: number, y: number): void {
        console.log('[NodeUpdateService] üìç Updating position:', {
            nodeId: node.id,
            nodeType: node.type,
            position: { x, y },
        });

        this.updateNodeData(node, { x, y });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–æ–¥—ã.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è resize.
     */
    updateNodeSize(node: FlowNode, width: number, height: number): void {
        console.log('[NodeUpdateService] üìê Updating size:', {
            nodeId: node.id,
            nodeType: node.type,
            size: { width, height },
        });

        this.updateNodeData(node, { width, height });
    }

    /**
     * –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ–∑–∏—Ü–∏—è + —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ).
     */
    updateNodePositionAndSize(
        node: FlowNode,
        x: number,
        y: number,
        width: number,
        height: number
    ): void {
        console.log('[NodeUpdateService] üìçüìê Updating position and size:', {
            nodeId: node.id,
            nodeType: node.type,
            position: { x, y },
            size: { width, height },
        });

        this.updateNodeData(node, { x, y, width, height });
    }
}