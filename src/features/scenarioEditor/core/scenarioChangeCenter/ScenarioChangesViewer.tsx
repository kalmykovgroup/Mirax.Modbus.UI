/**
 * –§–ê–ô–õ: src/features/scenarioEditor/components/ScenarioChangesViewer/ScenarioChangesViewer.tsx
 *
 * –ì–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <ScenarioChangesViewer />
 */

import { type JSX, memo, useCallback, useMemo, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import type { AppDispatch } from '@/baseStore/store.ts';
import { selectActiveScenarioId, refreshScenarioById } from '@/features/scenarioEditor/store/scenarioSlice';
import type { ScenarioOperationDto } from '@scenario/shared/contracts/server/remoteServerDtos/ScenarioDtos/ScenarioOperationDto';
import type { Guid } from '@app/lib/types/Guid';
import { DbEntityType } from '@scenario/shared/contracts/server/types/Api.Shared/Scenario/DbEntityType';
import { DbActionType } from '@scenario/shared/contracts/server/types/Api.Shared/Scenario/DbActionType';
import { scenarioApi } from '@/features/scenarioEditor/shared/api/scenarioApi';
import { useEntityChanges } from '@scenario/core/scenarioChangeCenter/useEntityChanges';
import { ChangesViewer } from '@scenario/core/scenarioChangeCenter/ChangesViewer';
import type { EntityChange } from '@scenario/core/scenarioChangeCenter/types';
import { selectChangesState } from '@scenario/store/scenarioChangesSlice';

export interface ScenarioChangesViewerProps {
    readonly className?: string | undefined;
}

export const ScenarioChangesViewer = memo(function ScenarioChangesViewer({
                                                                             className,
                                                                         }: ScenarioChangesViewerProps): JSX.Element | null {
    const dispatch = useDispatch<AppDispatch>();
    const activeScenarioId = useSelector(selectActiveScenarioId);

    // üîç –û–¢–õ–ê–î–ö–ê: –í–µ—Å—å state –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const changesState = useSelector(selectChangesState);

    // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º activeScenarioId –∏ –≤–µ—Å—å state
    useEffect(() => {
        console.log('üéØ ScenarioChangesViewer DEBUG:', {
            activeScenarioId,
            contextsKeys: Object.keys(changesState.contexts),
            fullState: changesState,
        });
    }, [activeScenarioId, changesState]);

    // –•—É–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
    const steps = useEntityChanges<{ id: string }>({
        contextId: activeScenarioId ?? '',
        entityType: 'Step',
    });

    const branches = useEntityChanges<{ id: string }>({
        contextId: activeScenarioId ?? '',
        entityType: 'Branch',
    });

    const relations = useEntityChanges<{ id: string }>({
        contextId: activeScenarioId ?? '',
        entityType: 'StepRelation',
    });

    // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—É–∫–æ–≤
    useEffect(() => {
        console.log('üìä Changes from hooks:', {
            steps: {
                count: steps.changesCount,
                changes: steps.changes,
                visualChanges: steps.visualChanges,
            },
            branches: {
                count: branches.changesCount,
                changes: branches.changes,
            },
            relations: {
                count: relations.changesCount,
                changes: relations.changes,
            },
        });
    }, [steps.changesCount, steps.changes, steps.visualChanges, branches.changesCount, branches.changes, relations.changesCount, relations.changes]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const allChanges = useMemo(() => {
        const combined = [
            ...steps.visualChanges,
            ...branches.visualChanges,
            ...relations.visualChanges,
        ];
        console.log('üìã Combined changes:', combined.length, combined);
        return combined;
    }, [steps.visualChanges, branches.visualChanges, relations.visualChanges]);

    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const handleApply = useCallback(async (): Promise<void> => {
        if (activeScenarioId === null || activeScenarioId === undefined) {
            return;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ScenarioOperationDto
        const operations: ScenarioOperationDto[] = [
            ...toOperations(steps.changes),
            ...toOperations(branches.changes),
            ...toOperations(relations.changes),
        ];

        if (operations.length === 0) {
            return;
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await dispatch(
                scenarioApi.endpoints.applyScenarioChanges.initiate({
                    scenarioId: activeScenarioId,
                    operations,
                })
            ).unwrap();

            // –û—á–∏—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            steps.clearChanges();
            branches.clearChanges();
            relations.clearChanges();

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
            await dispatch(refreshScenarioById(activeScenarioId, true));

            console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
        }
    }, [activeScenarioId, steps, branches, relations, dispatch]);

    // –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const handleCancel = useCallback(() => {
        steps.clearChanges();
        branches.clearChanges();
        relations.clearChanges();
    }, [steps, branches, relations]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
    const formatEntityType = useCallback((entityType: string): string => {
        const types: Record<string, string> = {
            Step: '–®–∞–≥',
            Branch: '–í–µ—Ç–∫–∞',
            StepRelation: '–°–≤—è–∑—å —à–∞–≥–æ–≤',
            ConditionStepBranchRelation: '–°–≤—è–∑—å —É—Å–ª–æ–≤–∏—è',
            ParallelStepBranchRelation: '–°–≤—è–∑—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏',
        };
        const result = types[entityType];
        return result !== undefined ? result : entityType;
    }, []);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
    const formatFieldName = useCallback((entityType: string, field: string): string => {
        const commonFields: Record<string, string> = {
            id: 'ID',
            name: '–ù–∞–∑–≤–∞–Ω–∏–µ',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            x: 'X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
            y: 'Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞',
            width: '–®–∏—Ä–∏–Ω–∞',
            height: '–í—ã—Å–æ—Ç–∞',
            branchId: 'ID –≤–µ—Ç–∫–∏',
            parentId: 'ID —Ä–æ–¥–∏—Ç–µ–ª—è',
            childId: 'ID –ø–æ—Ç–æ–º–∫–∞',
        };

        if (entityType === 'Step') {
            const stepFields: Record<string, string> = {
                ...commonFields,
                delaySeconds: '–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)',
                isActive: '–ê–∫—Ç–∏–≤–µ–Ω',
                priority: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            };
            const result = stepFields[field];
            return result !== undefined ? result : field;
        }

        const result = commonFields[field];
        return result !== undefined ? result : field;
    }, []);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    const formatValue = useCallback((value: unknown): string => {
        if (value === null) return 'null';
        if (value === undefined) return '‚Äî';

        if (typeof value === 'boolean') {
            return value ? '‚úì –î–∞' : '‚úó –ù–µ—Ç';
        }

        if (typeof value === 'string') {
            return value;
        }

        if (typeof value === 'number') {
            return String(value);
        }

        if (Array.isArray(value)) {
            return value.length > 0 ? value.join(', ') : '[]';
        }

        try {
            return JSON.stringify(value, null, 2);
        } catch {
            return String(value);
        }
    }, []);

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if (activeScenarioId === null || activeScenarioId === undefined) {
        console.log('‚ö†Ô∏è activeScenarioId is null/undefined');
        return null;
    }

    return (
        <ChangesViewer
            changes={allChanges}
            title="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"
            className={className}
            onApply={handleApply}
            onCancel={handleCancel}
            formatEntityType={formatEntityType}
            formatFieldName={formatFieldName}
            formatValue={formatValue}
        />
    );
});

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç EntityChange –≤ ScenarioOperationDto
 */
function toOperations(changes: readonly EntityChange[]): ScenarioOperationDto[] {
    return changes.map(change => ({
        opId: crypto.randomUUID() as Guid,
        entity: change.entityType as DbEntityType,
        action: change.action === 'create' ? DbActionType.Create
            : change.action === 'update' ? DbActionType.Update
                : DbActionType.Delete,
        payload: change.current ?? change.entityId,
    }));
}