/**
 * –§–ê–ô–õ: src/store/changes/useEntityChanges.ts
 *
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ª—é–±—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
 */

import { useCallback, useMemo, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import type { AppDispatch, RootState } from '@/baseStore/store.ts';
import type { Entity, EntityChange, ChangeVisual } from '@scenario/core/scenarioChangeCenter/types';
import { toVisuals } from '@scenario/core/scenarioChangeCenter/optimizer';
import {
    addChange,
    clearContext,
    removeChange,
    selectChangesCount,
    selectContextChangesArray,
    selectHasChanges,
    selectContextChanges,
} from '@scenario/store/scenarioChangesSlice';

export interface UseEntityChangesOptions {
    readonly contextId: string;
    readonly entityType: string;
}

export interface UseEntityChangesReturn<T extends Entity> {
    readonly changes: readonly EntityChange<T>[];
    readonly visualChanges: readonly ChangeVisual<T>[];
    readonly hasChanges: boolean;
    readonly changesCount: number;
    readonly trackCreate: (entity: T) => void;
    readonly trackUpdate: (original: T, updated: T) => void;
    readonly trackDelete: (entity: T) => void;
    readonly clearChanges: () => void;
    readonly removeChangeByKey: (key: string) => void;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–µ–π
 */
export function useEntityChanges<T extends Entity>({
                                                       contextId,
                                                       entityType,
                                                   }: UseEntityChangesOptions): UseEntityChangesReturn<T> {
    const dispatch = useDispatch<AppDispatch>();

    // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const fullContext = useSelector((state: RootState) =>
        selectContextChanges(contextId)(state)
    );

    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã
    const changes = useSelector((state: RootState) =>
        selectContextChangesArray(contextId)(state)
    ) as readonly EntityChange<T>[];

    const hasChanges = useSelector((state: RootState) =>
        selectHasChanges(contextId)(state)
    );

    const changesCount = useSelector((state: RootState) =>
        selectChangesCount(contextId)(state)
    );

    // üîç –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    useEffect(() => {
        console.log(`üîç useEntityChanges [${entityType}] DEBUG:`, {
            contextId,
            entityType,
            fullContext,
            changes,
            changesCount,
            hasChanges,
        });
    }, [contextId, entityType, fullContext, changes, changesCount, hasChanges]);

    // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å diff'–∞–º–∏
    const visualChanges = useMemo(
        () => toVisuals(changes),
        [changes]
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ
    const trackCreate = useCallback(
        (entity: T) => {
            console.log('üîµ trackCreate –≤—ã–∑–≤–∞–Ω:', { contextId, entityType, entity });

            dispatch(
                addChange({
                    contextId,
                    entityType,
                    entity,
                    action: 'create',
                })
            );
        },
        [dispatch, contextId, entityType]
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const trackUpdate = useCallback(
        (original: T, updated: T) => {
            console.log('üü° trackUpdate –≤—ã–∑–≤–∞–Ω:', { contextId, entityType, original, updated });

            dispatch(
                addChange({
                    contextId,
                    entityType,
                    entity: updated,
                    action: 'update',
                    original,
                })
            );
        },
        [dispatch, contextId, entityType]
    );

    // –£–¥–∞–ª–µ–Ω–∏–µ
    const trackDelete = useCallback(
        (entity: T) => {
            console.log('üî¥ trackDelete –≤—ã–∑–≤–∞–Ω:', { contextId, entityType, entity });

            dispatch(
                addChange({
                    contextId,
                    entityType,
                    entity,
                    action: 'delete',
                })
            );
        },
        [dispatch, contextId, entityType]
    );

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const clearChanges = useCallback(() => {
        console.log('üóëÔ∏è clearChanges –≤—ã–∑–≤–∞–Ω:', { contextId });
        dispatch(clearContext(contextId));
    }, [dispatch, contextId]);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const removeChangeByKey = useCallback(
        (key: string) => {
            console.log('‚ùå removeChangeByKey –≤—ã–∑–≤–∞–Ω:', { contextId, key });
            dispatch(removeChange({ contextId, key }));
        },
        [dispatch, contextId]
    );

    return useMemo(
        () => ({
            changes,
            visualChanges,
            hasChanges,
            changesCount,
            trackCreate,
            trackUpdate,
            trackDelete,
            clearChanges,
            removeChangeByKey,
        }),
        [
            changes,
            visualChanges,
            hasChanges,
            changesCount,
            trackCreate,
            trackUpdate,
            trackDelete,
            clearChanges,
            removeChangeByKey,
        ]
    );
}