import type {useAppDispatch} from "@/store/hooks.ts";
import type {TechnicalRunDto} from "@chartsPage/mirax/contracts/TechnicalRunDto.ts";
import type {PortableDeviceDto} from "@chartsPage/mirax/contracts/PortableDeviceDto.ts";
import type {ChartReqTemplateDto} from "@chartsPage/template/shared/dtos/ChartReqTemplateDto.ts";
import {Guid} from "@app/lib/types/Guid.ts";
import {addContextToTab, createTab, setActiveTab} from "@chartsPage/charts/core/store/tabsSlice.ts";
import {resolveTemplateForServer} from "@chartsPage/template/ui/templateResolve.ts";
import type {ResolvedCharReqTemplate} from "@chartsPage/template/shared/dtos/ResolvedCharReqTemplate.ts";
import {createContext} from "@chartsPage/charts/core/store/chartsSlice.ts";
import type { SensorDto } from '@chartsPage/mirax/contracts/SensorDto';

/**
 * –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω + —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞
 */
export async function buildCharts(
    dispatch: ReturnType<typeof useAppDispatch>,
    technicalRun: TechnicalRunDto,
    device: PortableDeviceDto,
    sensors: readonly SensorDto[],
    allTemplates: readonly ChartReqTemplateDto[],
    defaultBaseTemplateId: string,
    defaultSensorTemplateId: string,
): Promise<void> {
    console.group('üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    try {
        // 1. –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ ID
        const baseTemplate = allTemplates.find(t => t.id === defaultBaseTemplateId);
        const sensorTemplate = allTemplates.find(t => t.id === defaultSensorTemplateId);

        if (!baseTemplate) {
            console.error(' –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:', defaultBaseTemplateId);
            alert('–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
            return;
        }

        if (!sensorTemplate) {
            console.error(' –®–∞–±–ª–æ–Ω —Å–µ–Ω—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', defaultSensorTemplateId);
            alert('–®–∞–±–ª–æ–Ω —Å–µ–Ω—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
            return;
        }

        // 2. –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        const deviceId = device.factoryNumber ?? '';
        const technicalRunToStartId = technicalRun.id;

        /* // 3. –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
         const fromMs = technicalRun.dateStarTime
             ? new Date(technicalRun.dateStarTime).getTime()
             : Date.now() - 24 * 60 * 60 * 1000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

         const toMs = technicalRun.dateEndTime
             ? new Date(technicalRun.dateEndTime).getTime()
             : Date.now();*/

        // 4. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        const newTabId = Guid.NewGuid();
        dispatch(
            createTab({
                id: newTabId,
                name: `${device.name ?? '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'} - ${device.factoryNumber}`,
            })
        );
        dispatch(setActiveTab(newTabId));

        console.log(' –°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞:', { tabId: newTabId });

        // 5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω (BatteryVoltage, BatteryLevel, Temperature)
        const baseParams = {
            deviceId,
            technicalRunToStartId,
        };

        const baseResolved = resolveTemplateForServer(baseTemplate, baseParams) as ResolvedCharReqTemplate;
        /*baseResolved.resolvedFromMs = fromMs;
        baseResolved.resolvedToMs = toMs;*/

        const baseContextId = Guid.NewGuid();
        dispatch(
            createContext({
                contextId: baseContextId,
                template: baseResolved,
            })
        );
        dispatch(addContextToTab({ tabId: newTabId, contextId: baseContextId }));

        console.log(' –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∑–∞–ø—É—â–µ–Ω:', {
            templateId: baseTemplate.id,
            templateName: baseTemplate.name,
            contextId: baseContextId,
            params: baseParams,
        });

        // 6. –ó–∞–ø—É—Å—Ç–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞ (Concentration)
        for (const sensor of sensors) {
            const sensorParams = {
                deviceId,
                technicalRunToStartId,
                channelNumber: sensor.channelNumber ?? 0,
            };

            const sensorResolved = resolveTemplateForServer(
                sensorTemplate,
                sensorParams
            ) as ResolvedCharReqTemplate;
            /*sensorResolved.resolvedFromMs = fromMs;
            sensorResolved.resolvedToMs = toMs;*/

            // –ò–∑–º–µ–Ω—è–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏ –≥–∞–∑)
            sensorResolved.name = `${sensorTemplate.name} - –ö–∞–Ω–∞–ª ${sensor.channelNumber} (${sensor.gas ?? 'N/A'})`;

            const sensorContextId = Guid.NewGuid();
            dispatch(
                createContext({
                    contextId: sensorContextId,
                    template: sensorResolved,
                })
            );
            dispatch(addContextToTab({ tabId: newTabId, contextId: sensorContextId }));

            console.log(' –®–∞–±–ª–æ–Ω —Å–µ–Ω—Å–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω:', {
                templateId: sensorTemplate.id,
                templateName: sensorResolved.name,
                contextId: sensorContextId,
                channelNumber: sensor.channelNumber,
                gas: sensor.gas,
            });
        }

        console.log('üéâ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
        console.log('üìà –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:', 1 + sensors.length);

    } catch (error) {
        console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤. –°–º. –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } finally {
        console.groupEnd();
    }
}