// src/features/chartsPage/charts/ui/ChartContainer/FieldChartContainer/ViewFieldChart/SyncFields/SyncButton/SyncButton.tsx

import { useCallback } from 'react';
import { useSelector } from 'react-redux';
import { useAppDispatch } from '@/baseStore/hooks.ts';
import type { RootState } from '@/baseStore/store.ts';
import {
    selectActiveTabId,
    selectTabSyncContextsCount,
    selectTabSyncEnabled,
} from '@chartsPage/charts/core/store/tabsSlice';
import styles from './SyncButton.module.css';
import {toggleTabSyncWithAutoFill} from "@chartsPage/charts/orchestration/thunks/syncAutoFillThunk.ts";

/**
 * –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑—É–º–∞ –¥–ª—è –≤—Å–µ–π –≤–∫–ª–∞–¥–∫–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (—à–∞–±–ª–æ–Ω–æ–≤), —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export function SyncButton() {
    const dispatch = useAppDispatch();

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const activeTabId = useSelector(selectActiveTabId);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
    const syncEnabled = useSelector((state: RootState) => {
        if (!activeTabId) return false;
        return selectTabSyncEnabled(state, activeTabId);
    });

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncContextsCount = useSelector((state: RootState) => {
        if (!activeTabId) return 0;
        return selectTabSyncContextsCount(state, activeTabId);
    });

    const handleToggle = useCallback(() => {
        if (!activeTabId) {
            console.warn('[SyncButton] No active tab');
            return;
        }

        void dispatch(toggleTabSyncWithAutoFill(activeTabId));
    }, [dispatch, activeTabId]);

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (!activeTabId) {
        return null;
    }

    return (
        <button
            type="button"
            className={`${styles.syncButton} ${syncEnabled ? styles.active : ''}`}
            onClick={handleToggle}
            title={
                syncEnabled
                    ? '–û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑—É–º–∞ (–¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤)'
                    : '–í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑—É–º–∞ (–¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤)'
            }
        >
            <span className={styles.icon}>{syncEnabled ? 'üîó' : '‚õìÔ∏è‚Äçüí•'}</span>
            <span className={styles.label}>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑—É–º–∞</span>
            {syncEnabled && syncContextsCount > 0 && (
                <span className={styles.badge} title={`${syncContextsCount} —à–∞–±–ª–æ–Ω–æ–≤`}>
                    {syncContextsCount}
                </span>
            )}
        </button>
    );
}