// src/features/chartsPage/charts/ui/TabContent/TabContent.tsx

import { useState } from 'react';
import { useSelector } from 'react-redux';
import { useAppDispatch } from '@/store/hooks';
import { useConfirm } from '@ui/components/ConfirmProvider/ConfirmProvider';
import {
    selectTabContextIds,
    selectVisibleContextIds,
    toggleContextVisibility,
    showAllContexts,
    hideAllContexts,
    removeContextFromTab, selectTabSyncEnabled, selectActiveTabId,
} from '@chartsPage/charts/core/store/tabsSlice.ts';
import type { Guid } from '@app/lib/types/Guid';
import type { RootState } from '@/store/store';
import styles from './TabContent.module.css';
import { ContextFilterItem } from '@chartsPage/charts/ui/TabContent/ContextFilterItem/ContextFilterItem.tsx';
import { ContextSection } from '@chartsPage/charts/ui/TabContent/ContextSection/ContextSection.tsx';
import {
    SyncButton,
} from '@chartsPage/charts/ui/TabContent/ContextSection/ChartContainer/FieldChartContainer/ViewFieldChart/SyncFields/SyncButton/SyncButton.tsx';

interface TabContentProps {
    readonly tabId: Guid;
}

/**
 * –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏: —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ + —Å–ø–∏—Å–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤
 *
 * –ê–†–•–ò–¢–ï–ö–¢–£–†–ê "–ñ–ò–í–´–• –ö–û–ù–¢–ï–ö–°–¢–û–í":
 * - –†–µ–Ω–¥–µ—Ä–∏—Ç –í–°–ï –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–µ unmount –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏)
 * - –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ CSS (display: block/none)
 * - RequestManager'—ã –æ—Å—Ç–∞—é—Ç—Å—è –∂–∏–≤—ã–º–∏ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
 */
export function TabContent({ tabId }: TabContentProps) {
    const dispatch = useAppDispatch();
    const confirm = useConfirm();

    // üî• –ö–†–ò–¢–ò–ß–ù–û: allContextIds –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞, visibleContextIds –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    const allContextIds = useSelector((state: RootState) => selectTabContextIds(state, tabId));
    const visibleContextIds = useSelector((state: RootState) =>
        selectVisibleContextIds(state, tabId)
    );

    const [filterOpen, setFilterOpen] = useState(false);

    const allVisible = allContextIds.length === visibleContextIds.length;


    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const activeTabId = useSelector(selectActiveTabId);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
    const syncEnabled = useSelector((state: RootState) => {
        if (!activeTabId) return false;
        return selectTabSyncEnabled(state, activeTabId);
    });

    const handleToggleAll = () => {
        if (allVisible) {
            dispatch(hideAllContexts(tabId));
        } else {
            dispatch(showAllContexts(tabId));
        }
    };

    const handleRemoveContext = async (contextId: Guid) => {
        const ok = await confirm({
            title: '–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç?',
            description: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∫–ª–∞–¥–∫–∏',
            confirmText: '–£–¥–∞–ª–∏—Ç—å',
            cancelText: '–û—Ç–º–µ–Ω–∞',
            danger: true,
        });
        if (ok) {
            dispatch(removeContextFromTab({ tabId, contextId }));
        }
    };

    if (allContextIds.length === 0) {
        return (
            <div className={styles.emptyState}>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É</p>
            </div>
        );
    }

    return (
        <div className={styles.tabContent}>
            {/* –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ */}
            <div className={styles.contextFilter}>
                <button
                    className={styles.filterToggle}
                    onClick={() => setFilterOpen(!filterOpen)}
                    type="button"
                    aria-expanded={filterOpen}
                >
                    <span className={styles.filterArrow}>{filterOpen ? '‚ñº' : '‚ñ∂'}</span>
                    <span className={styles.filterTitle}>
                        –§–∏–ª—å—Ç—Ä —à–∞–±–ª–æ–Ω–æ–≤ ({visibleContextIds.length} –∏–∑ {allContextIds.length})
                    </span>
                </button>

                {filterOpen && (
                    <div className={styles.filterContent}>
                        <div className={styles.filterActions}>
                            <button
                                className={styles.filterToggleAll}
                                onClick={handleToggleAll}
                                type="button"
                                title={allVisible ? '–°–∫—Ä—ã—Ç—å –≤—Å–µ' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ'}
                            >
                                {allVisible ? '‚òë' : '‚òê'} –í—Å–µ
                            </button>
                        </div>

                        <div className={styles.contextList}>
                            {allContextIds.map((contextId) => (
                                <ContextFilterItem
                                    key={contextId}
                                    tabId={tabId}
                                    contextId={contextId}
                                    isVisible={visibleContextIds.includes(contextId)}
                                    onToggle={() =>
                                        dispatch(toggleContextVisibility({ tabId, contextId }))
                                    }
                                    onRemove={() => handleRemoveContext(contextId)}
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>

            {/* –õ–∏–ø–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è SyncButton */}
            <div
                className={`${styles.syncButtonContainer} ${syncEnabled ? styles.syncButtonSticky : ''}`}
            >
                <SyncButton />
            </div>

            {/* üî• –ö–†–ò–¢–ò–ß–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–µ–Ω–¥–µ—Ä–∏–º –í–°–ï –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, —É–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ CSS */}
            <div className={styles.contextSections}>
                {allContextIds.map((contextId) => {
                    const isVisible = visibleContextIds.includes(contextId);

                    return (
                        <div
                            key={contextId}
                            className={styles.contextWrapper}
                            style={{ display: isVisible ? 'block' : 'none' }}
                        >
                            <ContextSection contextId={contextId} />
                        </div>
                    );
                })}
            </div>

            {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤–µ—Ä—Ö —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ */}
            {visibleContextIds.length === 0 && (
                <div className={styles.emptyStateOverlay}>
                    <p>–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                    <p className={styles.hint}>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤</p>
                </div>
            )}
        </div>
    );
}


