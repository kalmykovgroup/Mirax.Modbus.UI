// src/charts/ui/CharContainer/ChartCollection/FieldChart/DataQualityIndicator/DataQualityIndicator.tsx

import React from 'react';
import classNames from 'classnames';
import styles from './DataQualityIndicator.module.css';
import type {DataQuality} from "@chartsPage/store/DataProxyService.ts";

export interface DataQualityIndicatorProps {
    quality?: DataQuality | undefined;
    isStale?: boolean | undefined;
    isLoading?: boolean | undefined;
    coverage?: number | undefined;
    sourceBucketMs?: number | undefined;
    targetBucketMs?: number | undefined;
    className?: string | undefined;
}

const DataQualityIndicator: React.FC<DataQualityIndicatorProps> = ({
                                                                       quality,
                                                                       isStale = false,
                                                                       isLoading = false,
                                                                       coverage,
                                                                       sourceBucketMs,
                                                                       targetBucketMs,
                                                                       className
                                                                   }) => {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ
    if (!quality || quality === 'exact') {
        return null;
    }

    const getQualityInfo = (): {
        text: string;
        icon: string;
        color: string;
        description: string;
    } | null => {
        switch (quality) {
            case 'upsampled':
                return {
                    text: '–ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    icon: 'üìä',
                    color: '#ff9800',
                    description: sourceBucketMs
                        ? `–ò–∑ —É—Ä–æ–≤–Ω—è ${formatBucketSize(sourceBucketMs)}`
                        : '–£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
                };
            case 'downsampled':
                return {
                    text: '–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    icon: 'üìâ',
                    color: '#2196f3',
                    description: sourceBucketMs
                        ? `–ò–∑ —É—Ä–æ–≤–Ω—è ${formatBucketSize(sourceBucketMs)}`
                        : '–£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
                };
            case 'interpolated':
                return {
                    text: '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    icon: '‚âà',
                    color: '#9c27b0',
                    description: sourceBucketMs
                        ? `–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ${formatBucketSize(sourceBucketMs)}`
                        : '–ë–ª–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏'
                };
            case 'none':
                return {
                    text: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    icon: '‚ö†Ô∏è',
                    color: '#f44336',
                    description: '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏'
                };
            case 'exact':
                // –≠—Ç–æ—Ç case –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ
                return null;
            default:
                // TypeScript –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                const _exhaustive: never = quality;
                return null;
        }
    };

    const info = getQualityInfo();
    if (!info) return null;

    return (
        <div
            className={classNames(
                styles.indicator,
                {
                    [styles.stale]: isStale,
                    [styles.loading]: isLoading
                },
                className
            )}
            style={{ borderColor: info.color }}
            title={info.description}
        >
            <div className={styles.header}>
                <span className={styles.icon}>{info.icon}</span>
                <span className={styles.text}>{info.text}</span>
                {isLoading && (
                    <div className={styles.spinner} />
                )}
            </div>

            {(coverage !== undefined || isStale) && (
                <div className={styles.details}>
                    {coverage !== undefined && (
                        <span className={styles.coverage}>
                            –ü–æ–∫—Ä—ã—Ç–∏–µ: {Math.round(coverage)}%
                        </span>
                    )}
                    {isStale && (
                        <span className={styles.staleLabel}>–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ</span>
                    )}
                </div>
            )}
        </div>
    );
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä bucket –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatBucketSize(ms: number): string {
    if (!ms || ms <= 0) return 'N/A';

    const seconds = Math.floor(ms / 1000);
    if (seconds < 60) {
        return `${seconds}—Å`;
    }

    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) {
        return `${minutes}–º`;
    }

    const hours = Math.floor(minutes / 60);
    if (hours < 24) {
        return `${hours}—á`;
    }

    const days = Math.floor(hours / 24);
    if (days < 7) {
        return `${days}–¥`;
    }

    const weeks = Math.floor(days / 7);
    if (weeks < 4) {
        return `${weeks}–Ω–µ–¥`;
    }

    const months = Math.floor(days / 30);
    return `${months}–º–µ—Å`;
}

export default DataQualityIndicator;